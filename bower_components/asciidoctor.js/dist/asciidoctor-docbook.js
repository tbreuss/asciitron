/* Generated by Opal 0.9.0.beta2 */
Opal.modules["asciidoctor/converter/docbook5"] = function(Opal) {
  Opal.dynamic_require_severity = "ignore";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$doctype', '$<<', '$doctype_declaration', '$attr?', '$attr', '$lang_attribute_name', '$document_ns_attributes', '$document_info_element', '$blocks?', '$content', '$empty?', '$docinfo', '$*', '$document', '$special', '$start_with?', '$sectname', '$<=', '$level', '$common_attributes', '$id', '$role', '$reftext', '$title', '$title_tag', '$resolve_content', '$title?', '$each', '$text', '$items', '$default=', '$style', '$nil?', '$text?', '$[]', '$image_uri', '$!', '$index', '$subs', '$delete', '$insert', '$require_library', '$to_mathml', '$parse', '$===', '$parent', '$warn', '$context', '$option?', '$include?', '$columns', '$colspan', '$column', '$-', '$+', '$rowspan', '$join', '$map', '$rows', '$select', '$type', '$target', '$attributes', '$inspect', '$icon_uri', '$>', '$size', '$chop', '$notitle', '$document_title_tags', '$doctitle', '$has_header?', '$<', '$to_i', '$author_element', '$times', '$subtitle?', '$main', '$subtitle', '$content_model']);
  return (function($base) {
    var self = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $DocBook5Converter(){};
      var self = $DocBook5Converter = $klass($base, $super, 'DocBook5Converter', $DocBook5Converter);

      var def = self.$$proto, $scope = self.$$scope, $a, $b;

      def.asciimath_available = nil;
      Opal.defn(self, '$document', function(node) {
        var $a, self = this, result = nil, root_tag_name = nil, doctype_line = nil, lang_attribute = nil, footer_docinfo = nil;

        result = [];
        if (((root_tag_name = node.$doctype()))['$==']("manpage")) {
          root_tag_name = "refentry"};
        result['$<<']("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        if ((($a = (doctype_line = self.$doctype_declaration(root_tag_name))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<'](doctype_line)};
        if ((($a = node['$attr?']("toc")) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = node['$attr?']("toclevels")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<?asciidoc-toc maxdepth=\"" + (node.$attr("toclevels")) + "\"?>")
            } else {
            result['$<<']("<?asciidoc-toc?>")
          }};
        if ((($a = node['$attr?']("sectnums")) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = node['$attr?']("sectnumlevels")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<?asciidoc-numbered maxdepth=\"" + (node.$attr("sectnumlevels")) + "\"?>")
            } else {
            result['$<<']("<?asciidoc-numbered?>")
          }};
        lang_attribute = (function() {if ((($a = (node['$attr?']("nolang"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return " " + (self.$lang_attribute_name()) + "=\"" + (node.$attr("lang", "en")) + "\""
        }; return nil; })();
        result['$<<']("<" + (root_tag_name) + (self.$document_ns_attributes(node)) + (lang_attribute) + ">");
        result['$<<']((self.$document_info_element(node, root_tag_name)));
        if ((($a = node['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<'](node.$content())};
        if ((($a = ((footer_docinfo = node.$docinfo("footer")))['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<'](footer_docinfo)
        };
        result['$<<']("</" + (root_tag_name) + ">");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.alias(self, 'embedded', 'content');

      Opal.defn(self, '$section', function(node) {
        var $a, $b, self = this, doctype = nil, tag_name = nil;

        doctype = node.$document().$doctype();
        if ((($a = node.$special()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ((tag_name = node.$sectname()))['$start_with?']("sect")) !== nil && (!$a.$$is_boolean || $a == true))) {
            tag_name = "section"}
          } else {
          tag_name = (function() {if ((($a = (($b = doctype['$==']("book")) ? $rb_le(node.$level(), 1) : doctype['$==']("book"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ((function() {if (node.$level()['$=='](0)) {
              return "part"
              } else {
              return "chapter"
            }; return nil; })())
            } else {
            return "section"
          }; return nil; })()
        };
        if (doctype['$==']("manpage")) {
          if (tag_name['$==']("section")) {
            tag_name = "refsection"
          } else if (tag_name['$==']("synopsis")) {
            tag_name = "refsynopsisdiv"}};
        return "<" + (tag_name) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n" + (node.$content()) + "\n</" + (tag_name) + ">";
      });

      Opal.defn(self, '$admonition', function(node) {
        var self = this, tag_name = nil;

        return "<" + (tag_name = node.$attr("name")) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n</" + (tag_name) + ">";
      });

      Opal.alias(self, 'audio', 'skip');

      Opal.defn(self, '$colist', function(node) {
        var $a, $b, TMP_1, self = this, result = nil;

        result = [];
        result['$<<']("<calloutlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<title>" + (node.$title()) + "</title>")};
        ($a = ($b = node.$items()).$each, $a.$$p = (TMP_1 = function(item){var self = TMP_1.$$s || this, $a;
if (item == null) item = nil;
        result['$<<']("<callout arearefs=\"" + (item.$attr("coids")) + "\">");
          result['$<<']("<para>" + (item.$text()) + "</para>");
          if ((($a = item['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</callout>");}, TMP_1.$$s = self, TMP_1), $a).call($b);
        result['$<<']("</calloutlist>");
        return $rb_times(result, $scope.get('EOL'));
      });

      (($a = [$hash2(["list", "entry", "term", "item"], {"list": "variablelist", "entry": "varlistentry", "term": "term", "item": "listitem"})]), $b = (Opal.cdecl($scope, 'DLIST_TAGS', $hash2(["labeled", "qanda", "glossary"], {"labeled": $hash2(["list", "entry", "term", "item"], {"list": "variablelist", "entry": "varlistentry", "term": "term", "item": "listitem"}), "qanda": $hash2(["list", "entry", "label", "term", "item"], {"list": "qandaset", "entry": "qandaentry", "label": "question", "term": "simpara", "item": "answer"}), "glossary": $hash2(["list", "entry", "term", "item"], {"list": nil, "entry": "glossentry", "term": "glossterm", "item": "glossdef"})}))), $b['$default='].apply($b, $a), $a[$a.length-1]);

      Opal.defn(self, '$dlist', function(node) {
        var $a, $b, TMP_2, $c, TMP_4, self = this, result = nil, tag_name = nil, tags = nil, list_tag = nil, entry_tag = nil, label_tag = nil, term_tag = nil, item_tag = nil;

        result = [];
        if (node.$style()['$==']("horizontal")) {
          result['$<<']("<" + (tag_name = (function() {if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "table"
            } else {
            return "informaltable"
          }; return nil; })()) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " tabstyle=\"horizontal\" frame=\"none\" colsep=\"0\" rowsep=\"0\">\n" + (self.$title_tag(node)) + "<tgroup cols=\"2\">\n<colspec colwidth=\"" + (node.$attr("labelwidth", 15)) + "*\"/>\n<colspec colwidth=\"" + (node.$attr("itemwidth", 85)) + "*\"/>\n<tbody valign=\"top\">");
          ($a = ($b = node.$items()).$each, $a.$$p = (TMP_2 = function(terms, dd){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (terms == null) terms = nil;if (dd == null) dd = nil;
          result['$<<']("<row>\n<entry>");
            ($a = ($b = [].concat(Opal.to_a(terms))).$each, $a.$$p = (TMP_3 = function(dt){var self = TMP_3.$$s || this;
if (dt == null) dt = nil;
            return result['$<<']("<simpara>" + (dt.$text()) + "</simpara>")}, TMP_3.$$s = self, TMP_3), $a).call($b);
            result['$<<']("</entry>\n<entry>");
            if ((($a = dd['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              if ((($a = dd['$text?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                result['$<<']("<simpara>" + (dd.$text()) + "</simpara>")};
              if ((($a = dd['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                result['$<<'](dd.$content())};
            };
            return result['$<<']("</entry>\n</row>");}, TMP_2.$$s = self, TMP_2), $a).call($b);
          result['$<<']("</tbody>\n</tgroup>\n</" + (tag_name) + ">");
          } else {
          tags = $scope.get('DLIST_TAGS')['$[]'](node.$style());
          list_tag = tags['$[]']("list");
          entry_tag = tags['$[]']("entry");
          label_tag = tags['$[]']("label");
          term_tag = tags['$[]']("term");
          item_tag = tags['$[]']("item");
          if (list_tag !== false && list_tag !== nil) {
            result['$<<']("<" + (list_tag) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
            if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<title>" + (node.$title()) + "</title>")};};
          ($a = ($c = node.$items()).$each, $a.$$p = (TMP_4 = function(terms, dd){var self = TMP_4.$$s || this, $a, $b, TMP_5;
if (terms == null) terms = nil;if (dd == null) dd = nil;
          result['$<<']("<" + (entry_tag) + ">");
            if (label_tag !== false && label_tag !== nil) {
              result['$<<']("<" + (label_tag) + ">")};
            ($a = ($b = [].concat(Opal.to_a(terms))).$each, $a.$$p = (TMP_5 = function(dt){var self = TMP_5.$$s || this;
if (dt == null) dt = nil;
            return result['$<<']("<" + (term_tag) + ">" + (dt.$text()) + "</" + (term_tag) + ">")}, TMP_5.$$s = self, TMP_5), $a).call($b);
            if (label_tag !== false && label_tag !== nil) {
              result['$<<']("</" + (label_tag) + ">")};
            result['$<<']("<" + (item_tag) + ">");
            if ((($a = dd['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              if ((($a = dd['$text?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                result['$<<']("<simpara>" + (dd.$text()) + "</simpara>")};
              if ((($a = dd['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                result['$<<'](dd.$content())};
            };
            result['$<<']("</" + (item_tag) + ">");
            return result['$<<']("</" + (entry_tag) + ">");}, TMP_4.$$s = self, TMP_4), $a).call($c);
          if (list_tag !== false && list_tag !== nil) {
            result['$<<']("</" + (list_tag) + ">")};
        };
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$example', function(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<example" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n" + (self.$resolve_content(node)) + "\n</example>"
          } else {
          return "<informalexample" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$resolve_content(node)) + "\n</informalexample>"
        };
      });

      Opal.defn(self, '$floating_title', function(node) {
        var self = this;

        return "<bridgehead" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " renderas=\"sect" + (node.$level()) + "\">" + (node.$title()) + "</bridgehead>";
      });

      Opal.defn(self, '$image', function(node) {
        var $a, self = this, width_attribute = nil, depth_attribute = nil, swidth_attribute = nil, scale_attribute = nil, align_attribute = nil, mediaobject = nil;

        width_attribute = (function() {if ((($a = (node['$attr?']("width"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " contentwidth=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        depth_attribute = (function() {if ((($a = (node['$attr?']("height"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " contentdepth=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        swidth_attribute = (function() {if ((($a = (node['$attr?']("scaledwidth"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " width=\"" + (node.$attr("scaledwidth")) + "\" scalefit=\"1\""
          } else {
          return nil
        }; return nil; })();
        scale_attribute = (function() {if ((($a = (node['$attr?']("scale"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " scale=\"" + (node.$attr("scale")) + "\""
          } else {
          return nil
        }; return nil; })();
        align_attribute = (function() {if ((($a = (node['$attr?']("align"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " align=\"" + (node.$attr("align")) + "\""
          } else {
          return nil
        }; return nil; })();
        mediaobject = "<mediaobject>\n<imageobject>\n<imagedata fileref=\"" + (node.$image_uri(node.$attr("target"))) + "\"" + (width_attribute) + (depth_attribute) + (swidth_attribute) + (scale_attribute) + (align_attribute) + "/>\n</imageobject>\n<textobject><phrase>" + (node.$attr("alt")) + "</phrase></textobject>\n</mediaobject>";
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<figure" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n" + (mediaobject) + "\n</figure>"
          } else {
          return "<informalfigure" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (mediaobject) + "\n</informalfigure>"
        };
      });

      Opal.defn(self, '$listing', function(node) {
        var $a, $b, self = this, informal = nil, listing_attributes = nil, numbering = nil, listing_content = nil;

        informal = node['$title?']()['$!']();
        listing_attributes = (self.$common_attributes(node.$id(), node.$role(), node.$reftext()));
        if ((($a = (($b = node.$style()['$==']("source")) ? (node['$attr?']("language")) : node.$style()['$==']("source"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          numbering = (function() {if ((($a = (node['$attr?']("linenums"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "numbered"
            } else {
            return "unnumbered"
          }; return nil; })();
          listing_content = "<programlisting" + ((function() {if (informal !== false && informal !== nil) {
            return listing_attributes
            } else {
            return nil
          }; return nil; })()) + " language=\"" + (node.$attr("language", nil, false)) + "\" linenumbering=\"" + (numbering) + "\">" + (node.$content()) + "</programlisting>";
          } else {
          listing_content = "<screen" + ((function() {if (informal !== false && informal !== nil) {
            return listing_attributes
            } else {
            return nil
          }; return nil; })()) + ">" + (node.$content()) + "</screen>"
        };
        if (informal !== false && informal !== nil) {
          return listing_content
          } else {
          return "<formalpara" + (listing_attributes) + ">\n<title>" + (node.$title()) + "</title>\n<para>\n" + (listing_content) + "\n</para>\n</formalpara>"
        };
      });

      Opal.defn(self, '$literal', function(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<formalpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n<para>\n<literallayout class=\"monospaced\">" + (node.$content()) + "</literallayout>\n</para>\n</formalpara>"
          } else {
          return "<literallayout" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " class=\"monospaced\">" + (node.$content()) + "</literallayout>"
        };
      });

      Opal.defn(self, '$stem', function(node) {
        var $a, $b, $c, $d, self = this, idx = nil, equation = nil, equation_data = nil;

        if ((($a = (idx = node.$subs().$index("specialcharacters"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          node.$subs().$delete("specialcharacters")};
        equation = node.$content();
        if (idx !== false && idx !== nil) {
          node.$subs().$insert(idx, "specialcharacters")};
        if (node.$style()['$==']("asciimath")) {
          if ((($a = (((($b = ((Opal.Object.$$scope.AsciiMath == null ? nil : 'constant'))) !== false && $b !== nil) ? $b : ((function() {if ((($c = ((($d = self['asciimath_available'], $d != null && $d !== nil) ? 'instance-variable' : nil))) !== nil && (!$c.$$is_boolean || $c == true))) {
            return self.asciimath_available
            } else {
            return (self.asciimath_available = $scope.get('Helpers').$require_library("asciimath", true, "warn"))
          }; return nil; })())))) !== nil && (!$a.$$is_boolean || $a == true))) {
            equation_data = (Opal.get('AsciiMath').$parse(equation)).$to_mathml("mml:", $hash2(["xmlns:mml"], {"xmlns:mml": "http://www.w3.org/1998/Math/MathML"}))
            } else {
            equation_data = "<mathphrase><![CDATA[" + (equation) + "]]></mathphrase>"
          }
          } else {
          equation_data = "<alt><![CDATA[" + (equation) + "]]></alt>\n<mathphrase><![CDATA[" + (equation) + "]]></mathphrase>"
        };
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<equation" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n" + (equation_data) + "\n</equation>"
          } else {
          return "<informalequation" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (equation_data) + "\n</informalequation>"
        };
      });

      Opal.defn(self, '$olist', function(node) {
        var $a, $b, TMP_6, self = this, result = nil, num_attribute = nil, start_attribute = nil;

        result = [];
        num_attribute = (function() {if ((($a = node.$style()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " numeration=\"" + (node.$style()) + "\""
          } else {
          return nil
        }; return nil; })();
        start_attribute = (function() {if ((($a = (node['$attr?']("start"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " startingnumber=\"" + (node.$attr("start")) + "\""
          } else {
          return nil
        }; return nil; })();
        result['$<<']("<orderedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (num_attribute) + (start_attribute) + ">");
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<title>" + (node.$title()) + "</title>")};
        ($a = ($b = node.$items()).$each, $a.$$p = (TMP_6 = function(item){var self = TMP_6.$$s || this, $a;
if (item == null) item = nil;
        result['$<<']("<listitem>");
          result['$<<']("<simpara>" + (item.$text()) + "</simpara>");
          if ((($a = item['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</listitem>");}, TMP_6.$$s = self, TMP_6), $a).call($b);
        result['$<<']("</orderedlist>");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$open', function(node) {
        var $a, $b, $c, self = this, $case = nil;

        return (function() {$case = node.$style();if ("abstract"['$===']($case)) {if ((($a = (($b = node.$parent()['$=='](node.$document())) ? node.$document()['$attr?']("doctype", "book") : node.$parent()['$=='](node.$document()))) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$warn("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.");
          return "";
          } else {
          return "<abstract>\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n</abstract>"
        }}else if ("partintro"['$===']($case)) {if ((($a = ($b = (($c = node.$level()['$=='](0)) ? node.$parent().$context()['$==']("section") : node.$level()['$=='](0)), $b !== false && $b !== nil ?node.$document().$doctype()['$==']("book") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<partintro" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n</partintro>"
          } else {
          self.$warn("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a part section. Excluding block content.");
          return "";
        }}else {return node.$content()}})();
      });

      Opal.defn(self, '$page_break', function(node) {
        var self = this;

        return "<simpara><?asciidoc-pagebreak?></simpara>";
      });

      Opal.defn(self, '$paragraph', function(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<formalpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n<para>" + (node.$content()) + "</para>\n</formalpara>"
          } else {
          return "<simpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">" + (node.$content()) + "</simpara>"
        };
      });

      Opal.defn(self, '$preamble', function(node) {
        var self = this;

        if (node.$document().$doctype()['$==']("book")) {
          return "<preface" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node, false)) + (node.$content()) + "\n</preface>"
          } else {
          return node.$content()
        };
      });

      Opal.defn(self, '$quote', function(node) {
        var $a, $b, self = this, result = nil;

        result = [];
        result['$<<']("<blockquote" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<title>" + (node.$title()) + "</title>")};
        if ((($a = ((($b = (node['$attr?']("attribution"))) !== false && $b !== nil) ? $b : (node['$attr?']("citetitle")))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<attribution>");
          if ((($a = node['$attr?']("attribution")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']((node.$attr("attribution")))};
          if ((($a = node['$attr?']("citetitle")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<citetitle>" + (node.$attr("citetitle")) + "</citetitle>")};
          result['$<<']("</attribution>");};
        result['$<<']((self.$resolve_content(node)));
        result['$<<']("</blockquote>");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$thematic_break', function(node) {
        var self = this;

        return "<simpara><?asciidoc-hr?></simpara>";
      });

      Opal.defn(self, '$sidebar', function(node) {
        var self = this;

        return "<sidebar" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n</sidebar>";
      });

      Opal.cdecl($scope, 'TABLE_PI_NAMES', ["dbhtml", "dbfo", "dblatex"]);

      Opal.cdecl($scope, 'TABLE_SECTIONS', ["head", "foot", "body"]);

      Opal.defn(self, '$table', function(node) {
        var $a, $b, TMP_7, $c, TMP_8, $d, TMP_9, $e, $f, TMP_14, self = this, has_body = nil, result = nil, pgwide_attribute = nil, tag_name = nil, col_width_key = nil, width = nil;

        has_body = false;
        result = [];
        pgwide_attribute = (function() {if ((($a = (node['$option?']("pgwide"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " pgwide=\"1\""
          } else {
          return nil
        }; return nil; })();
        result['$<<']("<" + (tag_name = (function() {if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "table"
          } else {
          return "informaltable"
        }; return nil; })()) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (pgwide_attribute) + " frame=\"" + (node.$attr("frame", "all")) + "\" rowsep=\"" + ((function() {if ((($a = ["none", "cols"]['$include?'](node.$attr("grid"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return 0
          } else {
          return 1
        }; return nil; })()) + "\" colsep=\"" + ((function() {if ((($a = ["none", "rows"]['$include?'](node.$attr("grid"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return 0
          } else {
          return 1
        }; return nil; })()) + "\">");
        if ((($a = (node['$option?']("unbreakable"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<?dbfo keep-together=\"always\"?>")
        } else if ((($a = (node['$option?']("breakable"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<?dbfo keep-together=\"auto\"?>")};
        if (tag_name['$==']("table")) {
          result['$<<']("<title>" + (node.$title()) + "</title>")};
        col_width_key = (function() {if ((($a = (width = (function() {if ((($b = (node['$attr?']("width"))) !== nil && (!$b.$$is_boolean || $b == true))) {
          return (node.$attr("width"))
          } else {
          return nil
        }; return nil; })())) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = $scope.get('TABLE_PI_NAMES')).$each, $a.$$p = (TMP_7 = function(pi_name){var self = TMP_7.$$s || this;
if (pi_name == null) pi_name = nil;
          return result['$<<']("<?" + (pi_name) + " table-width=\"" + (width) + "\"?>")}, TMP_7.$$s = self, TMP_7), $a).call($b);
          return "colabswidth";
          } else {
          return "colpcwidth"
        }; return nil; })();
        result['$<<']("<tgroup cols=\"" + (node.$attr("colcount")) + "\">");
        ($a = ($c = node.$columns()).$each, $a.$$p = (TMP_8 = function(col){var self = TMP_8.$$s || this;
if (col == null) col = nil;
        return result['$<<']("<colspec colname=\"col_" + (col.$attr("colnumber")) + "\" colwidth=\"" + (col.$attr(col_width_key)) + "*\"/>")}, TMP_8.$$s = self, TMP_8), $a).call($c);
        ($a = ($d = ($e = ($f = $scope.get('TABLE_SECTIONS')).$select, $e.$$p = (TMP_14 = function(tblsec){var self = TMP_14.$$s || this;
if (tblsec == null) tblsec = nil;
        return node.$rows()['$[]'](tblsec)['$empty?']()['$!']()}, TMP_14.$$s = self, TMP_14), $e).call($f)).$each, $a.$$p = (TMP_9 = function(tblsec){var self = TMP_9.$$s || this, $a, $b, TMP_10;
if (tblsec == null) tblsec = nil;
        if (tblsec['$==']("body")) {
            has_body = true};
          result['$<<']("<t" + (tblsec) + ">");
          ($a = ($b = node.$rows()['$[]'](tblsec)).$each, $a.$$p = (TMP_10 = function(row){var self = TMP_10.$$s || this, $a, $b, TMP_11;
if (row == null) row = nil;
          result['$<<']("<row>");
            ($a = ($b = row).$each, $a.$$p = (TMP_11 = function(cell){var self = TMP_11.$$s || this, $a, $b, TMP_12, $c, TMP_13, halign_attribute = nil, valign_attribute = nil, colspan_attribute = nil, colnum = nil, rowspan_attribute = nil, entry_start = nil, cell_content = nil, $case = nil, entry_end = nil;
if (cell == null) cell = nil;
            halign_attribute = (function() {if ((($a = (cell['$attr?']("halign"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return " align=\"" + (cell.$attr("halign")) + "\""
                } else {
                return nil
              }; return nil; })();
              valign_attribute = (function() {if ((($a = (cell['$attr?']("valign"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return " valign=\"" + (cell.$attr("valign")) + "\""
                } else {
                return nil
              }; return nil; })();
              colspan_attribute = (function() {if ((($a = cell.$colspan()) !== nil && (!$a.$$is_boolean || $a == true))) {
                return " namest=\"col_" + (colnum = cell.$column().$attr("colnumber")) + "\" nameend=\"col_" + ($rb_minus($rb_plus(colnum, cell.$colspan()), 1)) + "\""
                } else {
                return nil
              }; return nil; })();
              rowspan_attribute = (function() {if ((($a = cell.$rowspan()) !== nil && (!$a.$$is_boolean || $a == true))) {
                return " morerows=\"" + ($rb_minus(cell.$rowspan(), 1)) + "\""
                } else {
                return nil
              }; return nil; })();
              entry_start = "<entry" + (halign_attribute) + (valign_attribute) + (colspan_attribute) + (rowspan_attribute) + ">";
              cell_content = (function() {if (tblsec['$==']("head")) {
                return cell.$text()
                } else {
                return (function() {$case = cell.$style();if ("asciidoc"['$===']($case)) {return cell.$content()}else if ("verse"['$===']($case)) {return "<literallayout>" + (cell.$text()) + "</literallayout>"}else if ("literal"['$===']($case)) {return "<literallayout class=\"monospaced\">" + (cell.$text()) + "</literallayout>"}else if ("header"['$===']($case)) {return ($a = ($b = cell.$content()).$map, $a.$$p = (TMP_12 = function(text){var self = TMP_12.$$s || this;
if (text == null) text = nil;
                return "<simpara><emphasis role=\"strong\">" + (text) + "</emphasis></simpara>"}, TMP_12.$$s = self, TMP_12), $a).call($b).$join()}else {return ($a = ($c = cell.$content()).$map, $a.$$p = (TMP_13 = function(text){var self = TMP_13.$$s || this;
if (text == null) text = nil;
                return "<simpara>" + (text) + "</simpara>"}, TMP_13.$$s = self, TMP_13), $a).call($c).$join()}})()
              }; return nil; })();
              entry_end = (function() {if ((($a = (node.$document()['$attr?']("cellbgcolor"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return "<?dbfo bgcolor=\"" + (node.$document().$attr("cellbgcolor")) + "\"?></entry>"
                } else {
                return "</entry>"
              }; return nil; })();
              return result['$<<']("" + (entry_start) + (cell_content) + (entry_end));}, TMP_11.$$s = self, TMP_11), $a).call($b);
            return result['$<<']("</row>");}, TMP_10.$$s = self, TMP_10), $a).call($b);
          return result['$<<']("</t" + (tblsec) + ">");}, TMP_9.$$s = self, TMP_9), $a).call($d);
        result['$<<']("</tgroup>");
        result['$<<']("</" + (tag_name) + ">");
        if (has_body !== false && has_body !== nil) {
          } else {
          self.$warn("asciidoctor: WARNING: tables must have at least one body row")
        };
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.alias(self, 'toc', 'skip');

      Opal.defn(self, '$ulist', function(node) {
        var $a, $b, TMP_15, $c, TMP_16, self = this, result = nil, mark_type = nil, checklist = nil, mark_attribute = nil;

        result = [];
        if (node.$style()['$==']("bibliography")) {
          result['$<<']("<bibliodiv" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
          if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<title>" + (node.$title()) + "</title>")};
          ($a = ($b = node.$items()).$each, $a.$$p = (TMP_15 = function(item){var self = TMP_15.$$s || this, $a;
if (item == null) item = nil;
          result['$<<']("<bibliomixed>");
            result['$<<']("<bibliomisc>" + (item.$text()) + "</bibliomisc>");
            if ((($a = item['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<'](item.$content())};
            return result['$<<']("</bibliomixed>");}, TMP_15.$$s = self, TMP_15), $a).call($b);
          result['$<<']("</bibliodiv>");
          } else {
          mark_type = (function() {if ((($a = (checklist = node['$option?']("checklist"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "none"
            } else {
            return node.$style()
          }; return nil; })();
          mark_attribute = (function() {if (mark_type !== false && mark_type !== nil) {
            return " mark=\"" + (mark_type) + "\""
            } else {
            return nil
          }; return nil; })();
          result['$<<']("<itemizedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (mark_attribute) + ">");
          if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<title>" + (node.$title()) + "</title>")};
          ($a = ($c = node.$items()).$each, $a.$$p = (TMP_16 = function(item){var self = TMP_16.$$s || this, $a, $b, text_marker = nil;
if (item == null) item = nil;
          text_marker = (function() {if ((($a = (($b = checklist !== false && checklist !== nil) ? (item['$attr?']("checkbox")) : checklist)) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = (item['$attr?']("checked"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return "&#10003; "
                } else {
                return "&#10063; "
              }
              } else {
              return nil
            }; return nil; })();
            result['$<<']("<listitem>");
            result['$<<']("<simpara>" + (text_marker) + (item.$text()) + "</simpara>");
            if ((($a = item['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<'](item.$content())};
            return result['$<<']("</listitem>");}, TMP_16.$$s = self, TMP_16), $a).call($c);
          result['$<<']("</itemizedlist>");
        };
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$verse', function(node) {
        var $a, $b, self = this, result = nil;

        result = [];
        result['$<<']("<blockquote" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<title>" + (node.$title()) + "</title>")};
        if ((($a = ((($b = (node['$attr?']("attribution"))) !== false && $b !== nil) ? $b : (node['$attr?']("citetitle")))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<attribution>");
          if ((($a = node['$attr?']("attribution")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']((node.$attr("attribution")))};
          if ((($a = node['$attr?']("citetitle")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<citetitle>" + (node.$attr("citetitle")) + "</citetitle>")};
          result['$<<']("</attribution>");};
        result['$<<']("<literallayout>" + (node.$content()) + "</literallayout>");
        result['$<<']("</blockquote>");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.alias(self, 'video', 'skip');

      Opal.defn(self, '$inline_anchor', function(node) {
        var $a, self = this, $case = nil, path = nil, linkend = nil, text = nil, target = nil;

        return (function() {$case = node.$type();if ("ref"['$===']($case)) {return "<anchor" + (self.$common_attributes(node.$target(), nil, node.$text())) + "/>"}else if ("xref"['$===']($case)) {if ((($a = (path = node.$attributes()['$[]']("path"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<link xl:href=\"" + (node.$target()) + "\">" + (((($a = node.$text()) !== false && $a !== nil) ? $a : path)) + "</link>"
          } else {
          linkend = ((($a = node.$attributes()['$[]']("fragment")) !== false && $a !== nil) ? $a : node.$target());
          if ((($a = (text = node.$text())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "<link linkend=\"" + (linkend) + "\">" + (text) + "</link>"
            } else {
            return "<xref linkend=\"" + (linkend) + "\"/>"
          };
        }}else if ("link"['$===']($case)) {return "<link xl:href=\"" + (node.$target()) + "\">" + (node.$text()) + "</link>"}else if ("bibref"['$===']($case)) {target = node.$target();
        return "<anchor" + (self.$common_attributes(target, nil, "[" + (target) + "]")) + "/>[" + (target) + "]";}else {return self.$warn("asciidoctor: WARNING: unknown anchor type: " + (node.$type().$inspect()))}})();
      });

      Opal.defn(self, '$inline_break', function(node) {
        var self = this;

        return "" + (node.$text()) + "<?asciidoc-br?>";
      });

      Opal.defn(self, '$inline_button', function(node) {
        var self = this;

        return "<guibutton>" + (node.$text()) + "</guibutton>";
      });

      Opal.defn(self, '$inline_callout', function(node) {
        var self = this;

        return "<co" + (self.$common_attributes(node.$id())) + "/>";
      });

      Opal.defn(self, '$inline_footnote', function(node) {
        var self = this;

        if (node.$type()['$==']("xref")) {
          return "<footnoteref linkend=\"" + (node.$target()) + "\"/>"
          } else {
          return "<footnote" + (self.$common_attributes(node.$id())) + "><simpara>" + (node.$text()) + "</simpara></footnote>"
        };
      });

      Opal.defn(self, '$inline_image', function(node) {
        var $a, self = this, width_attribute = nil, depth_attribute = nil;

        width_attribute = (function() {if ((($a = (node['$attr?']("width"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " contentwidth=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        depth_attribute = (function() {if ((($a = (node['$attr?']("height"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " contentdepth=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        return "<inlinemediaobject>\n<imageobject>\n<imagedata fileref=\"" + ((function() {if (node.$type()['$==']("icon")) {
          return (node.$icon_uri(node.$target()))
          } else {
          return (node.$image_uri(node.$target()))
        }; return nil; })()) + "\"" + (width_attribute) + (depth_attribute) + "/>\n</imageobject>\n<textobject><phrase>" + (node.$attr("alt")) + "</phrase></textobject>\n</inlinemediaobject>";
      });

      Opal.defn(self, '$inline_indexterm', function(node) {
        var self = this, terms = nil, result = nil, numterms = nil;

        if (node.$type()['$==']("visible")) {
          return "<indexterm><primary>" + (node.$text()) + "</primary></indexterm>" + (node.$text())
          } else {
          terms = node.$attr("terms");
          result = [];
          if ($rb_gt((numterms = terms.$size()), 2)) {
            result['$<<']("<indexterm>\n<primary>" + (terms['$[]'](0)) + "</primary><secondary>" + (terms['$[]'](1)) + "</secondary><tertiary>" + (terms['$[]'](2)) + "</tertiary>\n</indexterm>")};
          if ($rb_gt(numterms, 1)) {
            result['$<<']("<indexterm>\n<primary>" + (terms['$[]'](-2)) + "</primary><secondary>" + (terms['$[]'](-1)) + "</secondary>\n</indexterm>")};
          result['$<<']("<indexterm>\n<primary>" + (terms['$[]'](-1)) + "</primary>\n</indexterm>");
          return $rb_times(result, $scope.get('EOL'));
        };
      });

      Opal.defn(self, '$inline_kbd', function(node) {
        var $a, $b, TMP_17, self = this, keys = nil;

        if (((keys = node.$attr("keys"))).$size()['$=='](1)) {
          return "<keycap>" + (keys['$[]'](0)) + "</keycap>"
          } else {
          return "<keycombo>" + (($a = ($b = keys).$map, $a.$$p = (TMP_17 = function(key){var self = TMP_17.$$s || this;
if (key == null) key = nil;
          return "<keycap>" + (key) + "</keycap>"}, TMP_17.$$s = self, TMP_17), $a).call($b).$join()) + "</keycombo>"
        };
      });

      Opal.defn(self, '$inline_menu', function(node) {
        var $a, $b, TMP_18, self = this, menu = nil, submenus = nil, submenu_path = nil, menuitem = nil;

        menu = node.$attr("menu");
        if ((($a = ((submenus = node.$attr("submenus")))['$empty?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          submenu_path = ($a = ($b = submenus).$map, $a.$$p = (TMP_18 = function(submenu){var self = TMP_18.$$s || this;
if (submenu == null) submenu = nil;
          return "<guisubmenu>" + (submenu) + "</guisubmenu> "}, TMP_18.$$s = self, TMP_18), $a).call($b).$join().$chop();
          return "<menuchoice><guimenu>" + (menu) + "</guimenu> " + (submenu_path) + " <guimenuitem>" + (node.$attr("menuitem")) + "</guimenuitem></menuchoice>";
        } else if ((($a = (menuitem = node.$attr("menuitem"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<menuchoice><guimenu>" + (menu) + "</guimenu> <guimenuitem>" + (menuitem) + "</guimenuitem></menuchoice>"
          } else {
          return "<guimenu>" + (menu) + "</guimenu>"
        };
      });

      (($a = [[nil, nil, true]]), $b = (Opal.cdecl($scope, 'QUOTE_TAGS', $hash2(["emphasis", "strong", "monospaced", "superscript", "subscript", "double", "single", "mark"], {"emphasis": ["<emphasis>", "</emphasis>", true], "strong": ["<emphasis role=\"strong\">", "</emphasis>", true], "monospaced": ["<literal>", "</literal>", false], "superscript": ["<superscript>", "</superscript>", false], "subscript": ["<subscript>", "</subscript>", false], "double": ["&#8220;", "&#8221;", true], "single": ["&#8216;", "&#8217;", true], "mark": ["<emphasis role=\"marked\">", "</emphasis>", false]}))), $b['$default='].apply($b, $a), $a[$a.length-1]);

      Opal.defn(self, '$inline_quoted', function(node) {
        var $a, $b, $c, $d, self = this, type = nil, equation = nil, open = nil, close = nil, supports_phrase = nil, text = nil, role = nil, quoted_text = nil;

        if (((type = node.$type()))['$==']("asciimath")) {
          if ((($a = (((($b = ((Opal.Object.$$scope.AsciiMath == null ? nil : 'constant'))) !== false && $b !== nil) ? $b : ((function() {if ((($c = ((($d = self['asciimath_available'], $d != null && $d !== nil) ? 'instance-variable' : nil))) !== nil && (!$c.$$is_boolean || $c == true))) {
            return self.asciimath_available
            } else {
            return (self.asciimath_available = $scope.get('Helpers').$require_library("asciimath", true, "warn"))
          }; return nil; })())))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "<inlineequation>" + ((Opal.get('AsciiMath').$parse(node.$text())).$to_mathml("mml:", $hash2(["xmlns:mml"], {"xmlns:mml": "http://www.w3.org/1998/Math/MathML"}))) + "</inlineequation>"
            } else {
            return "<inlineequation><mathphrase><![CDATA[" + (node.$text()) + "]]></mathphrase></inlineequation>"
          }
        } else if (type['$==']("latexmath")) {
          return "<inlineequation><alt><![CDATA[" + (equation = node.$text()) + "]]></alt><mathphrase><![CDATA[" + (equation) + "]]></mathphrase></inlineequation>"
          } else {
          $a = Opal.to_ary($scope.get('QUOTE_TAGS')['$[]'](type)), open = ($a[0] == null ? nil : $a[0]), close = ($a[1] == null ? nil : $a[1]), supports_phrase = ($a[2] == null ? nil : $a[2]);
          text = node.$text();
          if ((($a = (role = node.$role())) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (supports_phrase !== false && supports_phrase !== nil) {
              quoted_text = "" + (open) + "<phrase role=\"" + (role) + "\">" + (text) + "</phrase>" + (close)
              } else {
              quoted_text = "" + (open.$chop()) + " role=\"" + (role) + "\">" + (text) + (close)
            }
            } else {
            quoted_text = "" + (open) + (text) + (close)
          };
          if ((($a = node.$id()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "<anchor" + (self.$common_attributes(node.$id(), nil, text)) + "/>" + (quoted_text)
            } else {
            return quoted_text
          };
        };
      });

      Opal.defn(self, '$author_element', function(doc, index) {
        var $a, self = this, firstname_key = nil, middlename_key = nil, lastname_key = nil, email_key = nil, result = nil;

        if (index == null) {
          index = nil
        }
        firstname_key = (function() {if (index !== false && index !== nil) {
          return "firstname_" + (index)
          } else {
          return "firstname"
        }; return nil; })();
        middlename_key = (function() {if (index !== false && index !== nil) {
          return "middlename_" + (index)
          } else {
          return "middlename"
        }; return nil; })();
        lastname_key = (function() {if (index !== false && index !== nil) {
          return "lastname_" + (index)
          } else {
          return "lastname"
        }; return nil; })();
        email_key = (function() {if (index !== false && index !== nil) {
          return "email_" + (index)
          } else {
          return "email"
        }; return nil; })();
        result = [];
        result['$<<']("<author>");
        result['$<<']("<personname>");
        if ((($a = doc['$attr?'](firstname_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<firstname>" + (doc.$attr(firstname_key)) + "</firstname>")};
        if ((($a = doc['$attr?'](middlename_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<othername>" + (doc.$attr(middlename_key)) + "</othername>")};
        if ((($a = doc['$attr?'](lastname_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<surname>" + (doc.$attr(lastname_key)) + "</surname>")};
        result['$<<']("</personname>");
        if ((($a = doc['$attr?'](email_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<email>" + (doc.$attr(email_key)) + "</email>")};
        result['$<<']("</author>");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$common_attributes', function(id, role, reftext) {
        var self = this, res = nil;

        if (role == null) {
          role = nil
        }
        if (reftext == null) {
          reftext = nil
        }
        res = (function() {if (id !== false && id !== nil) {
          return " xml:id=\"" + (id) + "\""
          } else {
          return ""
        }; return nil; })();
        if (role !== false && role !== nil) {
          res = "" + (res) + " role=\"" + (role) + "\""};
        if (reftext !== false && reftext !== nil) {
          res = "" + (res) + " xreflabel=\"" + (reftext) + "\""};
        return res;
      });

      Opal.defn(self, '$doctype_declaration', function(root_tag_name) {
        var self = this;

        return nil;
      });

      Opal.defn(self, '$document_info_element', function(doc, info_tag_prefix, use_info_tag_prefix) {
        var $a, $b, TMP_19, $c, $d, self = this, result = nil, date = nil, authorcount = nil, head_docinfo = nil;

        if (use_info_tag_prefix == null) {
          use_info_tag_prefix = false
        }
        if (use_info_tag_prefix !== false && use_info_tag_prefix !== nil) {
          } else {
          info_tag_prefix = ""
        };
        result = [];
        result['$<<']("<" + (info_tag_prefix) + "info>");
        if ((($a = doc.$notitle()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<'](self.$document_title_tags(doc.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true}))))
        };
        if ((($a = (date = (function() {if ((($b = (doc['$attr?']("revdate"))) !== nil && (!$b.$$is_boolean || $b == true))) {
          return (doc.$attr("revdate"))
          } else {
          return ((function() {if ((($b = (doc['$attr?']("reproducible"))) !== nil && (!$b.$$is_boolean || $b == true))) {
            return nil
            } else {
            return (doc.$attr("docdate"))
          }; return nil; })())
        }; return nil; })())) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<date>" + (date) + "</date>")};
        if ((($a = doc['$has_header?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = doc['$attr?']("author")) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ($rb_lt((authorcount = (doc.$attr("authorcount")).$to_i()), 2)) {
              result['$<<']((self.$author_element(doc)));
              if ((($a = doc['$attr?']("authorinitials")) !== nil && (!$a.$$is_boolean || $a == true))) {
                result['$<<']("<authorinitials>" + (doc.$attr("authorinitials")) + "</authorinitials>")};
              } else {
              result['$<<']("<authorgroup>");
              ($a = ($b = authorcount).$times, $a.$$p = (TMP_19 = function(index){var self = TMP_19.$$s || this;
if (index == null) index = nil;
              return result['$<<']((self.$author_element(doc, $rb_plus(index, 1))))}, TMP_19.$$s = self, TMP_19), $a).call($b);
              result['$<<']("</authorgroup>");
            }};
          if ((($a = ($c = (doc['$attr?']("revdate")), $c !== false && $c !== nil ?(((($d = (doc['$attr?']("revnumber"))) !== false && $d !== nil) ? $d : (doc['$attr?']("revremark")))) : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<revhistory>\n<revision>");
            if ((($a = doc['$attr?']("revnumber")) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<revnumber>" + (doc.$attr("revnumber")) + "</revnumber>")};
            if ((($a = doc['$attr?']("revdate")) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<date>" + (doc.$attr("revdate")) + "</date>")};
            if ((($a = doc['$attr?']("authorinitials")) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<authorinitials>" + (doc.$attr("authorinitials")) + "</authorinitials>")};
            if ((($a = doc['$attr?']("revremark")) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<revremark>" + (doc.$attr("revremark")) + "</revremark>")};
            result['$<<']("</revision>\n</revhistory>");};
          if ((($a = ((head_docinfo = doc.$docinfo()))['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            result['$<<'](head_docinfo)
          };
          if ((($a = doc['$attr?']("orgname")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<orgname>" + (doc.$attr("orgname")) + "</orgname>")};};
        result['$<<']("</" + (info_tag_prefix) + "info>");
        if (doc.$doctype()['$==']("manpage")) {
          result['$<<']("<refmeta>");
          if ((($a = doc['$attr?']("mantitle")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<refentrytitle>" + (doc.$attr("mantitle")) + "</refentrytitle>")};
          if ((($a = doc['$attr?']("manvolnum")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<manvolnum>" + (doc.$attr("manvolnum")) + "</manvolnum>")};
          result['$<<']("</refmeta>");
          result['$<<']("<refnamediv>");
          if ((($a = doc['$attr?']("manname")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<refname>" + (doc.$attr("manname")) + "</refname>")};
          if ((($a = doc['$attr?']("manpurpose")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<refpurpose>" + (doc.$attr("manpurpose")) + "</refpurpose>")};
          result['$<<']("</refnamediv>");};
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$document_ns_attributes', function(doc) {
        var self = this;

        return " xmlns=\"http://docbook.org/ns/docbook\" xmlns:xl=\"http://www.w3.org/1999/xlink\" version=\"5.0\"";
      });

      Opal.defn(self, '$lang_attribute_name', function() {
        var self = this;

        return "xml:lang";
      });

      Opal.defn(self, '$document_title_tags', function(title) {
        var $a, self = this;

        if ((($a = title['$subtitle?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<title>" + (title.$main()) + "</title>\n<subtitle>" + (title.$subtitle()) + "</subtitle>"
          } else {
          return "<title>" + (title) + "</title>"
        };
      });

      Opal.defn(self, '$resolve_content', function(node) {
        var self = this;

        if (node.$content_model()['$==']("compound")) {
          return node.$content()
          } else {
          return "<simpara>" + (node.$content()) + "</simpara>"
        };
      });

      return (Opal.defn(self, '$title_tag', function(node, optional) {
        var $a, $b, self = this;

        if (optional == null) {
          optional = true
        }
        if ((($a = ((($b = optional['$!']()) !== false && $b !== nil) ? $b : node['$title?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<title>" + (node.$title()) + "</title>\n"
          } else {
          return nil
        };
      }), nil) && 'title_tag';
    })($scope.get('Converter'), (($scope.get('Converter')).$$scope.get('BuiltIn')))
  })($scope.base)
};

/* Generated by Opal 0.9.0.beta2 */
(function(Opal) {
  Opal.dynamic_require_severity = "ignore";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$==', '$context', '$parent', '$style', '$attr?', '$attr', '$<<', '$common_attributes', '$id', '$role', '$reftext', '$title?', '$title', '$each_with_index', '$text', '$blocks?', '$content', '$items', '$*', '$type', '$===', '$target', '$[]', '$attributes', '$empty?']);
  self.$require("asciidoctor/converter/docbook5");
  return (function($base) {
    var self = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $DocBook45Converter(){};
      var self = $DocBook45Converter = $klass($base, $super, 'DocBook45Converter', $DocBook45Converter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3;

      Opal.defn(self, '$admonition', TMP_1 = function(node) {var $zuper = $slice.call(arguments, 0);
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        if (node.$parent().$context()['$==']("example")) {
          return "<para>\n" + (Opal.find_super_dispatcher(self, 'admonition', TMP_1, $iter).apply(self, $zuper)) + "\n</para>"
          } else {
          return Opal.find_super_dispatcher(self, 'admonition', TMP_1, $iter).apply(self, $zuper)
        };
      });

      Opal.defn(self, '$olist', function(node) {
        var $a, $b, TMP_2, self = this, result = nil, num_attribute = nil, start_attribute = nil;

        result = [];
        num_attribute = (function() {if ((($a = node.$style()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " numeration=\"" + (node.$style()) + "\""
          } else {
          return nil
        }; return nil; })();
        start_attribute = (function() {if ((($a = (node['$attr?']("start"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " override=\"" + (node.$attr("start")) + "\""
          } else {
          return nil
        }; return nil; })();
        result['$<<']("<orderedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (num_attribute) + ">");
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<title>" + (node.$title()) + "</title>")};
        ($a = ($b = node.$items()).$each_with_index, $a.$$p = (TMP_2 = function(item, idx){var self = TMP_2.$$s || this, $a;
if (item == null) item = nil;if (idx == null) idx = nil;
        result['$<<'](((function() {if (idx['$=='](0)) {
            return "<listitem" + (start_attribute) + ">"
            } else {
            return "<listitem>"
          }; return nil; })()));
          result['$<<']("<simpara>" + (item.$text()) + "</simpara>");
          if ((($a = item['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</listitem>");}, TMP_2.$$s = self, TMP_2), $a).call($b);
        result['$<<']("</orderedlist>");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$inline_anchor', function(node) {
        var $a, self = this, $case = nil, path = nil, linkend = nil, text = nil, target = nil;

        return (function() {$case = node.$type();if ("ref"['$===']($case)) {return "<anchor" + (self.$common_attributes(node.$target(), nil, node.$text())) + "/>"}else if ("xref"['$===']($case)) {if ((($a = (path = node.$attributes()['$[]']("path"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<ulink url=\"" + (node.$target()) + "\">" + (((($a = node.$text()) !== false && $a !== nil) ? $a : path)) + "</ulink>"
          } else {
          linkend = ((($a = node.$attributes()['$[]']("fragment")) !== false && $a !== nil) ? $a : node.$target());
          if ((($a = (text = node.$text())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "<link linkend=\"" + (linkend) + "\">" + (text) + "</link>"
            } else {
            return "<xref linkend=\"" + (linkend) + "\"/>"
          };
        }}else if ("link"['$===']($case)) {return "<ulink url=\"" + (node.$target()) + "\">" + (node.$text()) + "</ulink>"}else if ("bibref"['$===']($case)) {target = node.$target();
        return "<anchor" + (self.$common_attributes(target, nil, "[" + (target) + "]")) + "/>[" + (target) + "]";}else { return nil }})();
      });

      Opal.defn(self, '$author_element', function(doc, index) {
        var $a, self = this, firstname_key = nil, middlename_key = nil, lastname_key = nil, email_key = nil, result = nil;

        if (index == null) {
          index = nil
        }
        firstname_key = (function() {if (index !== false && index !== nil) {
          return "firstname_" + (index)
          } else {
          return "firstname"
        }; return nil; })();
        middlename_key = (function() {if (index !== false && index !== nil) {
          return "middlename_" + (index)
          } else {
          return "middlename"
        }; return nil; })();
        lastname_key = (function() {if (index !== false && index !== nil) {
          return "lastname_" + (index)
          } else {
          return "lastname"
        }; return nil; })();
        email_key = (function() {if (index !== false && index !== nil) {
          return "email_" + (index)
          } else {
          return "email"
        }; return nil; })();
        result = [];
        result['$<<']("<author>");
        if ((($a = doc['$attr?'](firstname_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<firstname>" + (doc.$attr(firstname_key)) + "</firstname>")};
        if ((($a = doc['$attr?'](middlename_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<othername>" + (doc.$attr(middlename_key)) + "</othername>")};
        if ((($a = doc['$attr?'](lastname_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<surname>" + (doc.$attr(lastname_key)) + "</surname>")};
        if ((($a = doc['$attr?'](email_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<email>" + (doc.$attr(email_key)) + "</email>")};
        result['$<<']("</author>");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$common_attributes', function(id, role, reftext) {
        var self = this, res = nil;

        if (role == null) {
          role = nil
        }
        if (reftext == null) {
          reftext = nil
        }
        res = (function() {if (id !== false && id !== nil) {
          return " id=\"" + (id) + "\""
          } else {
          return ""
        }; return nil; })();
        if (role !== false && role !== nil) {
          res = "" + (res) + " role=\"" + (role) + "\""};
        if (reftext !== false && reftext !== nil) {
          res = "" + (res) + " xreflabel=\"" + (reftext) + "\""};
        return res;
      });

      Opal.defn(self, '$doctype_declaration', function(root_tag_name) {
        var self = this;

        return "<!DOCTYPE " + (root_tag_name) + " PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\">";
      });

      Opal.defn(self, '$document_info_element', TMP_3 = function(doc, info_tag_prefix) {
        var self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

        TMP_3.$$p = null;
        return Opal.find_super_dispatcher(self, 'document_info_element', TMP_3, null).apply(self, [doc, info_tag_prefix, true]);
      });

      Opal.defn(self, '$lang_attribute_name', function() {
        var self = this;

        return "lang";
      });

      return (Opal.defn(self, '$document_ns_attributes', function(doc) {
        var $a, self = this, ns = nil;

        if ((($a = (ns = doc.$attr("xmlns"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ns['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return " xmlns=\"http://docbook.org/ns/docbook\""
            } else {
            return " xmlns=\"" + (ns) + "\""
          }
          } else {
          return nil
        };
      }), nil) && 'document_ns_attributes';
    })($scope.get('Converter'), (($scope.get('Converter')).$$scope.get('DocBook5Converter')))
  })($scope.base);
})(Opal);

/* Generated by Opal 0.9.0.beta2 */
(function(Opal) {
  Opal.dynamic_require_severity = "ignore";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
})(Opal);

/* Generated by Opal 0.9.0.beta2 */
(function(Opal) {
  Opal.dynamic_require_severity = "ignore";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$doctype', '$<<', '$doctype_declaration', '$attr?', '$attr', '$lang_attribute_name', '$document_ns_attributes', '$document_info_element', '$blocks?', '$content', '$empty?', '$docinfo', '$*', '$document', '$special', '$start_with?', '$sectname', '$<=', '$level', '$common_attributes', '$id', '$role', '$reftext', '$title', '$title_tag', '$resolve_content', '$title?', '$each', '$text', '$items', '$default=', '$style', '$nil?', '$text?', '$[]', '$image_uri', '$!', '$index', '$subs', '$delete', '$insert', '$require_library', '$to_mathml', '$parse', '$===', '$parent', '$warn', '$context', '$option?', '$include?', '$columns', '$colspan', '$column', '$-', '$+', '$rowspan', '$join', '$map', '$rows', '$select', '$type', '$target', '$attributes', '$inspect', '$icon_uri', '$>', '$size', '$chop', '$notitle', '$document_title_tags', '$doctitle', '$has_header?', '$<', '$to_i', '$author_element', '$times', '$subtitle?', '$main', '$subtitle', '$content_model']);
  return (function($base) {
    var self = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $DocBook5Converter(){};
      var self = $DocBook5Converter = $klass($base, $super, 'DocBook5Converter', $DocBook5Converter);

      var def = self.$$proto, $scope = self.$$scope, $a, $b;

      def.asciimath_available = nil;
      Opal.defn(self, '$document', function(node) {
        var $a, self = this, result = nil, root_tag_name = nil, doctype_line = nil, lang_attribute = nil, footer_docinfo = nil;

        result = [];
        if (((root_tag_name = node.$doctype()))['$==']("manpage")) {
          root_tag_name = "refentry"};
        result['$<<']("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        if ((($a = (doctype_line = self.$doctype_declaration(root_tag_name))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<'](doctype_line)};
        if ((($a = node['$attr?']("toc")) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = node['$attr?']("toclevels")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<?asciidoc-toc maxdepth=\"" + (node.$attr("toclevels")) + "\"?>")
            } else {
            result['$<<']("<?asciidoc-toc?>")
          }};
        if ((($a = node['$attr?']("sectnums")) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = node['$attr?']("sectnumlevels")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<?asciidoc-numbered maxdepth=\"" + (node.$attr("sectnumlevels")) + "\"?>")
            } else {
            result['$<<']("<?asciidoc-numbered?>")
          }};
        lang_attribute = (function() {if ((($a = (node['$attr?']("nolang"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return " " + (self.$lang_attribute_name()) + "=\"" + (node.$attr("lang", "en")) + "\""
        }; return nil; })();
        result['$<<']("<" + (root_tag_name) + (self.$document_ns_attributes(node)) + (lang_attribute) + ">");
        result['$<<']((self.$document_info_element(node, root_tag_name)));
        if ((($a = node['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<'](node.$content())};
        if ((($a = ((footer_docinfo = node.$docinfo("footer")))['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<'](footer_docinfo)
        };
        result['$<<']("</" + (root_tag_name) + ">");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.alias(self, 'embedded', 'content');

      Opal.defn(self, '$section', function(node) {
        var $a, $b, self = this, doctype = nil, tag_name = nil;

        doctype = node.$document().$doctype();
        if ((($a = node.$special()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ((tag_name = node.$sectname()))['$start_with?']("sect")) !== nil && (!$a.$$is_boolean || $a == true))) {
            tag_name = "section"}
          } else {
          tag_name = (function() {if ((($a = (($b = doctype['$==']("book")) ? $rb_le(node.$level(), 1) : doctype['$==']("book"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ((function() {if (node.$level()['$=='](0)) {
              return "part"
              } else {
              return "chapter"
            }; return nil; })())
            } else {
            return "section"
          }; return nil; })()
        };
        if (doctype['$==']("manpage")) {
          if (tag_name['$==']("section")) {
            tag_name = "refsection"
          } else if (tag_name['$==']("synopsis")) {
            tag_name = "refsynopsisdiv"}};
        return "<" + (tag_name) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n" + (node.$content()) + "\n</" + (tag_name) + ">";
      });

      Opal.defn(self, '$admonition', function(node) {
        var self = this, tag_name = nil;

        return "<" + (tag_name = node.$attr("name")) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n</" + (tag_name) + ">";
      });

      Opal.alias(self, 'audio', 'skip');

      Opal.defn(self, '$colist', function(node) {
        var $a, $b, TMP_1, self = this, result = nil;

        result = [];
        result['$<<']("<calloutlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<title>" + (node.$title()) + "</title>")};
        ($a = ($b = node.$items()).$each, $a.$$p = (TMP_1 = function(item){var self = TMP_1.$$s || this, $a;
if (item == null) item = nil;
        result['$<<']("<callout arearefs=\"" + (item.$attr("coids")) + "\">");
          result['$<<']("<para>" + (item.$text()) + "</para>");
          if ((($a = item['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</callout>");}, TMP_1.$$s = self, TMP_1), $a).call($b);
        result['$<<']("</calloutlist>");
        return $rb_times(result, $scope.get('EOL'));
      });

      (($a = [$hash2(["list", "entry", "term", "item"], {"list": "variablelist", "entry": "varlistentry", "term": "term", "item": "listitem"})]), $b = (Opal.cdecl($scope, 'DLIST_TAGS', $hash2(["labeled", "qanda", "glossary"], {"labeled": $hash2(["list", "entry", "term", "item"], {"list": "variablelist", "entry": "varlistentry", "term": "term", "item": "listitem"}), "qanda": $hash2(["list", "entry", "label", "term", "item"], {"list": "qandaset", "entry": "qandaentry", "label": "question", "term": "simpara", "item": "answer"}), "glossary": $hash2(["list", "entry", "term", "item"], {"list": nil, "entry": "glossentry", "term": "glossterm", "item": "glossdef"})}))), $b['$default='].apply($b, $a), $a[$a.length-1]);

      Opal.defn(self, '$dlist', function(node) {
        var $a, $b, TMP_2, $c, TMP_4, self = this, result = nil, tag_name = nil, tags = nil, list_tag = nil, entry_tag = nil, label_tag = nil, term_tag = nil, item_tag = nil;

        result = [];
        if (node.$style()['$==']("horizontal")) {
          result['$<<']("<" + (tag_name = (function() {if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "table"
            } else {
            return "informaltable"
          }; return nil; })()) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " tabstyle=\"horizontal\" frame=\"none\" colsep=\"0\" rowsep=\"0\">\n" + (self.$title_tag(node)) + "<tgroup cols=\"2\">\n<colspec colwidth=\"" + (node.$attr("labelwidth", 15)) + "*\"/>\n<colspec colwidth=\"" + (node.$attr("itemwidth", 85)) + "*\"/>\n<tbody valign=\"top\">");
          ($a = ($b = node.$items()).$each, $a.$$p = (TMP_2 = function(terms, dd){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (terms == null) terms = nil;if (dd == null) dd = nil;
          result['$<<']("<row>\n<entry>");
            ($a = ($b = [].concat(Opal.to_a(terms))).$each, $a.$$p = (TMP_3 = function(dt){var self = TMP_3.$$s || this;
if (dt == null) dt = nil;
            return result['$<<']("<simpara>" + (dt.$text()) + "</simpara>")}, TMP_3.$$s = self, TMP_3), $a).call($b);
            result['$<<']("</entry>\n<entry>");
            if ((($a = dd['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              if ((($a = dd['$text?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                result['$<<']("<simpara>" + (dd.$text()) + "</simpara>")};
              if ((($a = dd['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                result['$<<'](dd.$content())};
            };
            return result['$<<']("</entry>\n</row>");}, TMP_2.$$s = self, TMP_2), $a).call($b);
          result['$<<']("</tbody>\n</tgroup>\n</" + (tag_name) + ">");
          } else {
          tags = $scope.get('DLIST_TAGS')['$[]'](node.$style());
          list_tag = tags['$[]']("list");
          entry_tag = tags['$[]']("entry");
          label_tag = tags['$[]']("label");
          term_tag = tags['$[]']("term");
          item_tag = tags['$[]']("item");
          if (list_tag !== false && list_tag !== nil) {
            result['$<<']("<" + (list_tag) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
            if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<title>" + (node.$title()) + "</title>")};};
          ($a = ($c = node.$items()).$each, $a.$$p = (TMP_4 = function(terms, dd){var self = TMP_4.$$s || this, $a, $b, TMP_5;
if (terms == null) terms = nil;if (dd == null) dd = nil;
          result['$<<']("<" + (entry_tag) + ">");
            if (label_tag !== false && label_tag !== nil) {
              result['$<<']("<" + (label_tag) + ">")};
            ($a = ($b = [].concat(Opal.to_a(terms))).$each, $a.$$p = (TMP_5 = function(dt){var self = TMP_5.$$s || this;
if (dt == null) dt = nil;
            return result['$<<']("<" + (term_tag) + ">" + (dt.$text()) + "</" + (term_tag) + ">")}, TMP_5.$$s = self, TMP_5), $a).call($b);
            if (label_tag !== false && label_tag !== nil) {
              result['$<<']("</" + (label_tag) + ">")};
            result['$<<']("<" + (item_tag) + ">");
            if ((($a = dd['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              if ((($a = dd['$text?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                result['$<<']("<simpara>" + (dd.$text()) + "</simpara>")};
              if ((($a = dd['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                result['$<<'](dd.$content())};
            };
            result['$<<']("</" + (item_tag) + ">");
            return result['$<<']("</" + (entry_tag) + ">");}, TMP_4.$$s = self, TMP_4), $a).call($c);
          if (list_tag !== false && list_tag !== nil) {
            result['$<<']("</" + (list_tag) + ">")};
        };
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$example', function(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<example" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n" + (self.$resolve_content(node)) + "\n</example>"
          } else {
          return "<informalexample" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$resolve_content(node)) + "\n</informalexample>"
        };
      });

      Opal.defn(self, '$floating_title', function(node) {
        var self = this;

        return "<bridgehead" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " renderas=\"sect" + (node.$level()) + "\">" + (node.$title()) + "</bridgehead>";
      });

      Opal.defn(self, '$image', function(node) {
        var $a, self = this, width_attribute = nil, depth_attribute = nil, swidth_attribute = nil, scale_attribute = nil, align_attribute = nil, mediaobject = nil;

        width_attribute = (function() {if ((($a = (node['$attr?']("width"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " contentwidth=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        depth_attribute = (function() {if ((($a = (node['$attr?']("height"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " contentdepth=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        swidth_attribute = (function() {if ((($a = (node['$attr?']("scaledwidth"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " width=\"" + (node.$attr("scaledwidth")) + "\" scalefit=\"1\""
          } else {
          return nil
        }; return nil; })();
        scale_attribute = (function() {if ((($a = (node['$attr?']("scale"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " scale=\"" + (node.$attr("scale")) + "\""
          } else {
          return nil
        }; return nil; })();
        align_attribute = (function() {if ((($a = (node['$attr?']("align"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " align=\"" + (node.$attr("align")) + "\""
          } else {
          return nil
        }; return nil; })();
        mediaobject = "<mediaobject>\n<imageobject>\n<imagedata fileref=\"" + (node.$image_uri(node.$attr("target"))) + "\"" + (width_attribute) + (depth_attribute) + (swidth_attribute) + (scale_attribute) + (align_attribute) + "/>\n</imageobject>\n<textobject><phrase>" + (node.$attr("alt")) + "</phrase></textobject>\n</mediaobject>";
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<figure" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n" + (mediaobject) + "\n</figure>"
          } else {
          return "<informalfigure" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (mediaobject) + "\n</informalfigure>"
        };
      });

      Opal.defn(self, '$listing', function(node) {
        var $a, $b, self = this, informal = nil, listing_attributes = nil, numbering = nil, listing_content = nil;

        informal = node['$title?']()['$!']();
        listing_attributes = (self.$common_attributes(node.$id(), node.$role(), node.$reftext()));
        if ((($a = (($b = node.$style()['$==']("source")) ? (node['$attr?']("language")) : node.$style()['$==']("source"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          numbering = (function() {if ((($a = (node['$attr?']("linenums"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "numbered"
            } else {
            return "unnumbered"
          }; return nil; })();
          listing_content = "<programlisting" + ((function() {if (informal !== false && informal !== nil) {
            return listing_attributes
            } else {
            return nil
          }; return nil; })()) + " language=\"" + (node.$attr("language", nil, false)) + "\" linenumbering=\"" + (numbering) + "\">" + (node.$content()) + "</programlisting>";
          } else {
          listing_content = "<screen" + ((function() {if (informal !== false && informal !== nil) {
            return listing_attributes
            } else {
            return nil
          }; return nil; })()) + ">" + (node.$content()) + "</screen>"
        };
        if (informal !== false && informal !== nil) {
          return listing_content
          } else {
          return "<formalpara" + (listing_attributes) + ">\n<title>" + (node.$title()) + "</title>\n<para>\n" + (listing_content) + "\n</para>\n</formalpara>"
        };
      });

      Opal.defn(self, '$literal', function(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<formalpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n<para>\n<literallayout class=\"monospaced\">" + (node.$content()) + "</literallayout>\n</para>\n</formalpara>"
          } else {
          return "<literallayout" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " class=\"monospaced\">" + (node.$content()) + "</literallayout>"
        };
      });

      Opal.defn(self, '$stem', function(node) {
        var $a, $b, $c, $d, self = this, idx = nil, equation = nil, equation_data = nil;

        if ((($a = (idx = node.$subs().$index("specialcharacters"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          node.$subs().$delete("specialcharacters")};
        equation = node.$content();
        if (idx !== false && idx !== nil) {
          node.$subs().$insert(idx, "specialcharacters")};
        if (node.$style()['$==']("asciimath")) {
          if ((($a = (((($b = ((Opal.Object.$$scope.AsciiMath == null ? nil : 'constant'))) !== false && $b !== nil) ? $b : ((function() {if ((($c = ((($d = self['asciimath_available'], $d != null && $d !== nil) ? 'instance-variable' : nil))) !== nil && (!$c.$$is_boolean || $c == true))) {
            return self.asciimath_available
            } else {
            return (self.asciimath_available = $scope.get('Helpers').$require_library("asciimath", true, "warn"))
          }; return nil; })())))) !== nil && (!$a.$$is_boolean || $a == true))) {
            equation_data = (Opal.get('AsciiMath').$parse(equation)).$to_mathml("mml:", $hash2(["xmlns:mml"], {"xmlns:mml": "http://www.w3.org/1998/Math/MathML"}))
            } else {
            equation_data = "<mathphrase><![CDATA[" + (equation) + "]]></mathphrase>"
          }
          } else {
          equation_data = "<alt><![CDATA[" + (equation) + "]]></alt>\n<mathphrase><![CDATA[" + (equation) + "]]></mathphrase>"
        };
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<equation" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n" + (equation_data) + "\n</equation>"
          } else {
          return "<informalequation" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (equation_data) + "\n</informalequation>"
        };
      });

      Opal.defn(self, '$olist', function(node) {
        var $a, $b, TMP_6, self = this, result = nil, num_attribute = nil, start_attribute = nil;

        result = [];
        num_attribute = (function() {if ((($a = node.$style()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " numeration=\"" + (node.$style()) + "\""
          } else {
          return nil
        }; return nil; })();
        start_attribute = (function() {if ((($a = (node['$attr?']("start"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " startingnumber=\"" + (node.$attr("start")) + "\""
          } else {
          return nil
        }; return nil; })();
        result['$<<']("<orderedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (num_attribute) + (start_attribute) + ">");
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<title>" + (node.$title()) + "</title>")};
        ($a = ($b = node.$items()).$each, $a.$$p = (TMP_6 = function(item){var self = TMP_6.$$s || this, $a;
if (item == null) item = nil;
        result['$<<']("<listitem>");
          result['$<<']("<simpara>" + (item.$text()) + "</simpara>");
          if ((($a = item['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</listitem>");}, TMP_6.$$s = self, TMP_6), $a).call($b);
        result['$<<']("</orderedlist>");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$open', function(node) {
        var $a, $b, $c, self = this, $case = nil;

        return (function() {$case = node.$style();if ("abstract"['$===']($case)) {if ((($a = (($b = node.$parent()['$=='](node.$document())) ? node.$document()['$attr?']("doctype", "book") : node.$parent()['$=='](node.$document()))) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$warn("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.");
          return "";
          } else {
          return "<abstract>\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n</abstract>"
        }}else if ("partintro"['$===']($case)) {if ((($a = ($b = (($c = node.$level()['$=='](0)) ? node.$parent().$context()['$==']("section") : node.$level()['$=='](0)), $b !== false && $b !== nil ?node.$document().$doctype()['$==']("book") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<partintro" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n</partintro>"
          } else {
          self.$warn("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a part section. Excluding block content.");
          return "";
        }}else {return node.$content()}})();
      });

      Opal.defn(self, '$page_break', function(node) {
        var self = this;

        return "<simpara><?asciidoc-pagebreak?></simpara>";
      });

      Opal.defn(self, '$paragraph', function(node) {
        var $a, self = this;

        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<formalpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n<title>" + (node.$title()) + "</title>\n<para>" + (node.$content()) + "</para>\n</formalpara>"
          } else {
          return "<simpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">" + (node.$content()) + "</simpara>"
        };
      });

      Opal.defn(self, '$preamble', function(node) {
        var self = this;

        if (node.$document().$doctype()['$==']("book")) {
          return "<preface" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node, false)) + (node.$content()) + "\n</preface>"
          } else {
          return node.$content()
        };
      });

      Opal.defn(self, '$quote', function(node) {
        var $a, $b, self = this, result = nil;

        result = [];
        result['$<<']("<blockquote" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<title>" + (node.$title()) + "</title>")};
        if ((($a = ((($b = (node['$attr?']("attribution"))) !== false && $b !== nil) ? $b : (node['$attr?']("citetitle")))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<attribution>");
          if ((($a = node['$attr?']("attribution")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']((node.$attr("attribution")))};
          if ((($a = node['$attr?']("citetitle")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<citetitle>" + (node.$attr("citetitle")) + "</citetitle>")};
          result['$<<']("</attribution>");};
        result['$<<']((self.$resolve_content(node)));
        result['$<<']("</blockquote>");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$thematic_break', function(node) {
        var self = this;

        return "<simpara><?asciidoc-hr?></simpara>";
      });

      Opal.defn(self, '$sidebar', function(node) {
        var self = this;

        return "<sidebar" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$resolve_content(node)) + "\n</sidebar>";
      });

      Opal.cdecl($scope, 'TABLE_PI_NAMES', ["dbhtml", "dbfo", "dblatex"]);

      Opal.cdecl($scope, 'TABLE_SECTIONS', ["head", "foot", "body"]);

      Opal.defn(self, '$table', function(node) {
        var $a, $b, TMP_7, $c, TMP_8, $d, TMP_9, $e, $f, TMP_14, self = this, has_body = nil, result = nil, pgwide_attribute = nil, tag_name = nil, col_width_key = nil, width = nil;

        has_body = false;
        result = [];
        pgwide_attribute = (function() {if ((($a = (node['$option?']("pgwide"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " pgwide=\"1\""
          } else {
          return nil
        }; return nil; })();
        result['$<<']("<" + (tag_name = (function() {if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "table"
          } else {
          return "informaltable"
        }; return nil; })()) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (pgwide_attribute) + " frame=\"" + (node.$attr("frame", "all")) + "\" rowsep=\"" + ((function() {if ((($a = ["none", "cols"]['$include?'](node.$attr("grid"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return 0
          } else {
          return 1
        }; return nil; })()) + "\" colsep=\"" + ((function() {if ((($a = ["none", "rows"]['$include?'](node.$attr("grid"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return 0
          } else {
          return 1
        }; return nil; })()) + "\">");
        if ((($a = (node['$option?']("unbreakable"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<?dbfo keep-together=\"always\"?>")
        } else if ((($a = (node['$option?']("breakable"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<?dbfo keep-together=\"auto\"?>")};
        if (tag_name['$==']("table")) {
          result['$<<']("<title>" + (node.$title()) + "</title>")};
        col_width_key = (function() {if ((($a = (width = (function() {if ((($b = (node['$attr?']("width"))) !== nil && (!$b.$$is_boolean || $b == true))) {
          return (node.$attr("width"))
          } else {
          return nil
        }; return nil; })())) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = $scope.get('TABLE_PI_NAMES')).$each, $a.$$p = (TMP_7 = function(pi_name){var self = TMP_7.$$s || this;
if (pi_name == null) pi_name = nil;
          return result['$<<']("<?" + (pi_name) + " table-width=\"" + (width) + "\"?>")}, TMP_7.$$s = self, TMP_7), $a).call($b);
          return "colabswidth";
          } else {
          return "colpcwidth"
        }; return nil; })();
        result['$<<']("<tgroup cols=\"" + (node.$attr("colcount")) + "\">");
        ($a = ($c = node.$columns()).$each, $a.$$p = (TMP_8 = function(col){var self = TMP_8.$$s || this;
if (col == null) col = nil;
        return result['$<<']("<colspec colname=\"col_" + (col.$attr("colnumber")) + "\" colwidth=\"" + (col.$attr(col_width_key)) + "*\"/>")}, TMP_8.$$s = self, TMP_8), $a).call($c);
        ($a = ($d = ($e = ($f = $scope.get('TABLE_SECTIONS')).$select, $e.$$p = (TMP_14 = function(tblsec){var self = TMP_14.$$s || this;
if (tblsec == null) tblsec = nil;
        return node.$rows()['$[]'](tblsec)['$empty?']()['$!']()}, TMP_14.$$s = self, TMP_14), $e).call($f)).$each, $a.$$p = (TMP_9 = function(tblsec){var self = TMP_9.$$s || this, $a, $b, TMP_10;
if (tblsec == null) tblsec = nil;
        if (tblsec['$==']("body")) {
            has_body = true};
          result['$<<']("<t" + (tblsec) + ">");
          ($a = ($b = node.$rows()['$[]'](tblsec)).$each, $a.$$p = (TMP_10 = function(row){var self = TMP_10.$$s || this, $a, $b, TMP_11;
if (row == null) row = nil;
          result['$<<']("<row>");
            ($a = ($b = row).$each, $a.$$p = (TMP_11 = function(cell){var self = TMP_11.$$s || this, $a, $b, TMP_12, $c, TMP_13, halign_attribute = nil, valign_attribute = nil, colspan_attribute = nil, colnum = nil, rowspan_attribute = nil, entry_start = nil, cell_content = nil, $case = nil, entry_end = nil;
if (cell == null) cell = nil;
            halign_attribute = (function() {if ((($a = (cell['$attr?']("halign"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return " align=\"" + (cell.$attr("halign")) + "\""
                } else {
                return nil
              }; return nil; })();
              valign_attribute = (function() {if ((($a = (cell['$attr?']("valign"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return " valign=\"" + (cell.$attr("valign")) + "\""
                } else {
                return nil
              }; return nil; })();
              colspan_attribute = (function() {if ((($a = cell.$colspan()) !== nil && (!$a.$$is_boolean || $a == true))) {
                return " namest=\"col_" + (colnum = cell.$column().$attr("colnumber")) + "\" nameend=\"col_" + ($rb_minus($rb_plus(colnum, cell.$colspan()), 1)) + "\""
                } else {
                return nil
              }; return nil; })();
              rowspan_attribute = (function() {if ((($a = cell.$rowspan()) !== nil && (!$a.$$is_boolean || $a == true))) {
                return " morerows=\"" + ($rb_minus(cell.$rowspan(), 1)) + "\""
                } else {
                return nil
              }; return nil; })();
              entry_start = "<entry" + (halign_attribute) + (valign_attribute) + (colspan_attribute) + (rowspan_attribute) + ">";
              cell_content = (function() {if (tblsec['$==']("head")) {
                return cell.$text()
                } else {
                return (function() {$case = cell.$style();if ("asciidoc"['$===']($case)) {return cell.$content()}else if ("verse"['$===']($case)) {return "<literallayout>" + (cell.$text()) + "</literallayout>"}else if ("literal"['$===']($case)) {return "<literallayout class=\"monospaced\">" + (cell.$text()) + "</literallayout>"}else if ("header"['$===']($case)) {return ($a = ($b = cell.$content()).$map, $a.$$p = (TMP_12 = function(text){var self = TMP_12.$$s || this;
if (text == null) text = nil;
                return "<simpara><emphasis role=\"strong\">" + (text) + "</emphasis></simpara>"}, TMP_12.$$s = self, TMP_12), $a).call($b).$join()}else {return ($a = ($c = cell.$content()).$map, $a.$$p = (TMP_13 = function(text){var self = TMP_13.$$s || this;
if (text == null) text = nil;
                return "<simpara>" + (text) + "</simpara>"}, TMP_13.$$s = self, TMP_13), $a).call($c).$join()}})()
              }; return nil; })();
              entry_end = (function() {if ((($a = (node.$document()['$attr?']("cellbgcolor"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return "<?dbfo bgcolor=\"" + (node.$document().$attr("cellbgcolor")) + "\"?></entry>"
                } else {
                return "</entry>"
              }; return nil; })();
              return result['$<<']("" + (entry_start) + (cell_content) + (entry_end));}, TMP_11.$$s = self, TMP_11), $a).call($b);
            return result['$<<']("</row>");}, TMP_10.$$s = self, TMP_10), $a).call($b);
          return result['$<<']("</t" + (tblsec) + ">");}, TMP_9.$$s = self, TMP_9), $a).call($d);
        result['$<<']("</tgroup>");
        result['$<<']("</" + (tag_name) + ">");
        if (has_body !== false && has_body !== nil) {
          } else {
          self.$warn("asciidoctor: WARNING: tables must have at least one body row")
        };
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.alias(self, 'toc', 'skip');

      Opal.defn(self, '$ulist', function(node) {
        var $a, $b, TMP_15, $c, TMP_16, self = this, result = nil, mark_type = nil, checklist = nil, mark_attribute = nil;

        result = [];
        if (node.$style()['$==']("bibliography")) {
          result['$<<']("<bibliodiv" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
          if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<title>" + (node.$title()) + "</title>")};
          ($a = ($b = node.$items()).$each, $a.$$p = (TMP_15 = function(item){var self = TMP_15.$$s || this, $a;
if (item == null) item = nil;
          result['$<<']("<bibliomixed>");
            result['$<<']("<bibliomisc>" + (item.$text()) + "</bibliomisc>");
            if ((($a = item['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<'](item.$content())};
            return result['$<<']("</bibliomixed>");}, TMP_15.$$s = self, TMP_15), $a).call($b);
          result['$<<']("</bibliodiv>");
          } else {
          mark_type = (function() {if ((($a = (checklist = node['$option?']("checklist"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "none"
            } else {
            return node.$style()
          }; return nil; })();
          mark_attribute = (function() {if (mark_type !== false && mark_type !== nil) {
            return " mark=\"" + (mark_type) + "\""
            } else {
            return nil
          }; return nil; })();
          result['$<<']("<itemizedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (mark_attribute) + ">");
          if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<title>" + (node.$title()) + "</title>")};
          ($a = ($c = node.$items()).$each, $a.$$p = (TMP_16 = function(item){var self = TMP_16.$$s || this, $a, $b, text_marker = nil;
if (item == null) item = nil;
          text_marker = (function() {if ((($a = (($b = checklist !== false && checklist !== nil) ? (item['$attr?']("checkbox")) : checklist)) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = (item['$attr?']("checked"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return "&#10003; "
                } else {
                return "&#10063; "
              }
              } else {
              return nil
            }; return nil; })();
            result['$<<']("<listitem>");
            result['$<<']("<simpara>" + (text_marker) + (item.$text()) + "</simpara>");
            if ((($a = item['$blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<'](item.$content())};
            return result['$<<']("</listitem>");}, TMP_16.$$s = self, TMP_16), $a).call($c);
          result['$<<']("</itemizedlist>");
        };
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$verse', function(node) {
        var $a, $b, self = this, result = nil;

        result = [];
        result['$<<']("<blockquote" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
        if ((($a = node['$title?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<title>" + (node.$title()) + "</title>")};
        if ((($a = ((($b = (node['$attr?']("attribution"))) !== false && $b !== nil) ? $b : (node['$attr?']("citetitle")))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<attribution>");
          if ((($a = node['$attr?']("attribution")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']((node.$attr("attribution")))};
          if ((($a = node['$attr?']("citetitle")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<citetitle>" + (node.$attr("citetitle")) + "</citetitle>")};
          result['$<<']("</attribution>");};
        result['$<<']("<literallayout>" + (node.$content()) + "</literallayout>");
        result['$<<']("</blockquote>");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.alias(self, 'video', 'skip');

      Opal.defn(self, '$inline_anchor', function(node) {
        var $a, self = this, $case = nil, path = nil, linkend = nil, text = nil, target = nil;

        return (function() {$case = node.$type();if ("ref"['$===']($case)) {return "<anchor" + (self.$common_attributes(node.$target(), nil, node.$text())) + "/>"}else if ("xref"['$===']($case)) {if ((($a = (path = node.$attributes()['$[]']("path"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<link xl:href=\"" + (node.$target()) + "\">" + (((($a = node.$text()) !== false && $a !== nil) ? $a : path)) + "</link>"
          } else {
          linkend = ((($a = node.$attributes()['$[]']("fragment")) !== false && $a !== nil) ? $a : node.$target());
          if ((($a = (text = node.$text())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "<link linkend=\"" + (linkend) + "\">" + (text) + "</link>"
            } else {
            return "<xref linkend=\"" + (linkend) + "\"/>"
          };
        }}else if ("link"['$===']($case)) {return "<link xl:href=\"" + (node.$target()) + "\">" + (node.$text()) + "</link>"}else if ("bibref"['$===']($case)) {target = node.$target();
        return "<anchor" + (self.$common_attributes(target, nil, "[" + (target) + "]")) + "/>[" + (target) + "]";}else {return self.$warn("asciidoctor: WARNING: unknown anchor type: " + (node.$type().$inspect()))}})();
      });

      Opal.defn(self, '$inline_break', function(node) {
        var self = this;

        return "" + (node.$text()) + "<?asciidoc-br?>";
      });

      Opal.defn(self, '$inline_button', function(node) {
        var self = this;

        return "<guibutton>" + (node.$text()) + "</guibutton>";
      });

      Opal.defn(self, '$inline_callout', function(node) {
        var self = this;

        return "<co" + (self.$common_attributes(node.$id())) + "/>";
      });

      Opal.defn(self, '$inline_footnote', function(node) {
        var self = this;

        if (node.$type()['$==']("xref")) {
          return "<footnoteref linkend=\"" + (node.$target()) + "\"/>"
          } else {
          return "<footnote" + (self.$common_attributes(node.$id())) + "><simpara>" + (node.$text()) + "</simpara></footnote>"
        };
      });

      Opal.defn(self, '$inline_image', function(node) {
        var $a, self = this, width_attribute = nil, depth_attribute = nil;

        width_attribute = (function() {if ((($a = (node['$attr?']("width"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " contentwidth=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        depth_attribute = (function() {if ((($a = (node['$attr?']("height"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " contentdepth=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        return "<inlinemediaobject>\n<imageobject>\n<imagedata fileref=\"" + ((function() {if (node.$type()['$==']("icon")) {
          return (node.$icon_uri(node.$target()))
          } else {
          return (node.$image_uri(node.$target()))
        }; return nil; })()) + "\"" + (width_attribute) + (depth_attribute) + "/>\n</imageobject>\n<textobject><phrase>" + (node.$attr("alt")) + "</phrase></textobject>\n</inlinemediaobject>";
      });

      Opal.defn(self, '$inline_indexterm', function(node) {
        var self = this, terms = nil, result = nil, numterms = nil;

        if (node.$type()['$==']("visible")) {
          return "<indexterm><primary>" + (node.$text()) + "</primary></indexterm>" + (node.$text())
          } else {
          terms = node.$attr("terms");
          result = [];
          if ($rb_gt((numterms = terms.$size()), 2)) {
            result['$<<']("<indexterm>\n<primary>" + (terms['$[]'](0)) + "</primary><secondary>" + (terms['$[]'](1)) + "</secondary><tertiary>" + (terms['$[]'](2)) + "</tertiary>\n</indexterm>")};
          if ($rb_gt(numterms, 1)) {
            result['$<<']("<indexterm>\n<primary>" + (terms['$[]'](-2)) + "</primary><secondary>" + (terms['$[]'](-1)) + "</secondary>\n</indexterm>")};
          result['$<<']("<indexterm>\n<primary>" + (terms['$[]'](-1)) + "</primary>\n</indexterm>");
          return $rb_times(result, $scope.get('EOL'));
        };
      });

      Opal.defn(self, '$inline_kbd', function(node) {
        var $a, $b, TMP_17, self = this, keys = nil;

        if (((keys = node.$attr("keys"))).$size()['$=='](1)) {
          return "<keycap>" + (keys['$[]'](0)) + "</keycap>"
          } else {
          return "<keycombo>" + (($a = ($b = keys).$map, $a.$$p = (TMP_17 = function(key){var self = TMP_17.$$s || this;
if (key == null) key = nil;
          return "<keycap>" + (key) + "</keycap>"}, TMP_17.$$s = self, TMP_17), $a).call($b).$join()) + "</keycombo>"
        };
      });

      Opal.defn(self, '$inline_menu', function(node) {
        var $a, $b, TMP_18, self = this, menu = nil, submenus = nil, submenu_path = nil, menuitem = nil;

        menu = node.$attr("menu");
        if ((($a = ((submenus = node.$attr("submenus")))['$empty?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          submenu_path = ($a = ($b = submenus).$map, $a.$$p = (TMP_18 = function(submenu){var self = TMP_18.$$s || this;
if (submenu == null) submenu = nil;
          return "<guisubmenu>" + (submenu) + "</guisubmenu> "}, TMP_18.$$s = self, TMP_18), $a).call($b).$join().$chop();
          return "<menuchoice><guimenu>" + (menu) + "</guimenu> " + (submenu_path) + " <guimenuitem>" + (node.$attr("menuitem")) + "</guimenuitem></menuchoice>";
        } else if ((($a = (menuitem = node.$attr("menuitem"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<menuchoice><guimenu>" + (menu) + "</guimenu> <guimenuitem>" + (menuitem) + "</guimenuitem></menuchoice>"
          } else {
          return "<guimenu>" + (menu) + "</guimenu>"
        };
      });

      (($a = [[nil, nil, true]]), $b = (Opal.cdecl($scope, 'QUOTE_TAGS', $hash2(["emphasis", "strong", "monospaced", "superscript", "subscript", "double", "single", "mark"], {"emphasis": ["<emphasis>", "</emphasis>", true], "strong": ["<emphasis role=\"strong\">", "</emphasis>", true], "monospaced": ["<literal>", "</literal>", false], "superscript": ["<superscript>", "</superscript>", false], "subscript": ["<subscript>", "</subscript>", false], "double": ["&#8220;", "&#8221;", true], "single": ["&#8216;", "&#8217;", true], "mark": ["<emphasis role=\"marked\">", "</emphasis>", false]}))), $b['$default='].apply($b, $a), $a[$a.length-1]);

      Opal.defn(self, '$inline_quoted', function(node) {
        var $a, $b, $c, $d, self = this, type = nil, equation = nil, open = nil, close = nil, supports_phrase = nil, text = nil, role = nil, quoted_text = nil;

        if (((type = node.$type()))['$==']("asciimath")) {
          if ((($a = (((($b = ((Opal.Object.$$scope.AsciiMath == null ? nil : 'constant'))) !== false && $b !== nil) ? $b : ((function() {if ((($c = ((($d = self['asciimath_available'], $d != null && $d !== nil) ? 'instance-variable' : nil))) !== nil && (!$c.$$is_boolean || $c == true))) {
            return self.asciimath_available
            } else {
            return (self.asciimath_available = $scope.get('Helpers').$require_library("asciimath", true, "warn"))
          }; return nil; })())))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "<inlineequation>" + ((Opal.get('AsciiMath').$parse(node.$text())).$to_mathml("mml:", $hash2(["xmlns:mml"], {"xmlns:mml": "http://www.w3.org/1998/Math/MathML"}))) + "</inlineequation>"
            } else {
            return "<inlineequation><mathphrase><![CDATA[" + (node.$text()) + "]]></mathphrase></inlineequation>"
          }
        } else if (type['$==']("latexmath")) {
          return "<inlineequation><alt><![CDATA[" + (equation = node.$text()) + "]]></alt><mathphrase><![CDATA[" + (equation) + "]]></mathphrase></inlineequation>"
          } else {
          $a = Opal.to_ary($scope.get('QUOTE_TAGS')['$[]'](type)), open = ($a[0] == null ? nil : $a[0]), close = ($a[1] == null ? nil : $a[1]), supports_phrase = ($a[2] == null ? nil : $a[2]);
          text = node.$text();
          if ((($a = (role = node.$role())) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (supports_phrase !== false && supports_phrase !== nil) {
              quoted_text = "" + (open) + "<phrase role=\"" + (role) + "\">" + (text) + "</phrase>" + (close)
              } else {
              quoted_text = "" + (open.$chop()) + " role=\"" + (role) + "\">" + (text) + (close)
            }
            } else {
            quoted_text = "" + (open) + (text) + (close)
          };
          if ((($a = node.$id()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "<anchor" + (self.$common_attributes(node.$id(), nil, text)) + "/>" + (quoted_text)
            } else {
            return quoted_text
          };
        };
      });

      Opal.defn(self, '$author_element', function(doc, index) {
        var $a, self = this, firstname_key = nil, middlename_key = nil, lastname_key = nil, email_key = nil, result = nil;

        if (index == null) {
          index = nil
        }
        firstname_key = (function() {if (index !== false && index !== nil) {
          return "firstname_" + (index)
          } else {
          return "firstname"
        }; return nil; })();
        middlename_key = (function() {if (index !== false && index !== nil) {
          return "middlename_" + (index)
          } else {
          return "middlename"
        }; return nil; })();
        lastname_key = (function() {if (index !== false && index !== nil) {
          return "lastname_" + (index)
          } else {
          return "lastname"
        }; return nil; })();
        email_key = (function() {if (index !== false && index !== nil) {
          return "email_" + (index)
          } else {
          return "email"
        }; return nil; })();
        result = [];
        result['$<<']("<author>");
        result['$<<']("<personname>");
        if ((($a = doc['$attr?'](firstname_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<firstname>" + (doc.$attr(firstname_key)) + "</firstname>")};
        if ((($a = doc['$attr?'](middlename_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<othername>" + (doc.$attr(middlename_key)) + "</othername>")};
        if ((($a = doc['$attr?'](lastname_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<surname>" + (doc.$attr(lastname_key)) + "</surname>")};
        result['$<<']("</personname>");
        if ((($a = doc['$attr?'](email_key)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<email>" + (doc.$attr(email_key)) + "</email>")};
        result['$<<']("</author>");
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$common_attributes', function(id, role, reftext) {
        var self = this, res = nil;

        if (role == null) {
          role = nil
        }
        if (reftext == null) {
          reftext = nil
        }
        res = (function() {if (id !== false && id !== nil) {
          return " xml:id=\"" + (id) + "\""
          } else {
          return ""
        }; return nil; })();
        if (role !== false && role !== nil) {
          res = "" + (res) + " role=\"" + (role) + "\""};
        if (reftext !== false && reftext !== nil) {
          res = "" + (res) + " xreflabel=\"" + (reftext) + "\""};
        return res;
      });

      Opal.defn(self, '$doctype_declaration', function(root_tag_name) {
        var self = this;

        return nil;
      });

      Opal.defn(self, '$document_info_element', function(doc, info_tag_prefix, use_info_tag_prefix) {
        var $a, $b, TMP_19, $c, $d, self = this, result = nil, date = nil, authorcount = nil, head_docinfo = nil;

        if (use_info_tag_prefix == null) {
          use_info_tag_prefix = false
        }
        if (use_info_tag_prefix !== false && use_info_tag_prefix !== nil) {
          } else {
          info_tag_prefix = ""
        };
        result = [];
        result['$<<']("<" + (info_tag_prefix) + "info>");
        if ((($a = doc.$notitle()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<'](self.$document_title_tags(doc.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true}))))
        };
        if ((($a = (date = (function() {if ((($b = (doc['$attr?']("revdate"))) !== nil && (!$b.$$is_boolean || $b == true))) {
          return (doc.$attr("revdate"))
          } else {
          return ((function() {if ((($b = (doc['$attr?']("reproducible"))) !== nil && (!$b.$$is_boolean || $b == true))) {
            return nil
            } else {
            return (doc.$attr("docdate"))
          }; return nil; })())
        }; return nil; })())) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<date>" + (date) + "</date>")};
        if ((($a = doc['$has_header?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = doc['$attr?']("author")) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ($rb_lt((authorcount = (doc.$attr("authorcount")).$to_i()), 2)) {
              result['$<<']((self.$author_element(doc)));
              if ((($a = doc['$attr?']("authorinitials")) !== nil && (!$a.$$is_boolean || $a == true))) {
                result['$<<']("<authorinitials>" + (doc.$attr("authorinitials")) + "</authorinitials>")};
              } else {
              result['$<<']("<authorgroup>");
              ($a = ($b = authorcount).$times, $a.$$p = (TMP_19 = function(index){var self = TMP_19.$$s || this;
if (index == null) index = nil;
              return result['$<<']((self.$author_element(doc, $rb_plus(index, 1))))}, TMP_19.$$s = self, TMP_19), $a).call($b);
              result['$<<']("</authorgroup>");
            }};
          if ((($a = ($c = (doc['$attr?']("revdate")), $c !== false && $c !== nil ?(((($d = (doc['$attr?']("revnumber"))) !== false && $d !== nil) ? $d : (doc['$attr?']("revremark")))) : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<revhistory>\n<revision>");
            if ((($a = doc['$attr?']("revnumber")) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<revnumber>" + (doc.$attr("revnumber")) + "</revnumber>")};
            if ((($a = doc['$attr?']("revdate")) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<date>" + (doc.$attr("revdate")) + "</date>")};
            if ((($a = doc['$attr?']("authorinitials")) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<authorinitials>" + (doc.$attr("authorinitials")) + "</authorinitials>")};
            if ((($a = doc['$attr?']("revremark")) !== nil && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<revremark>" + (doc.$attr("revremark")) + "</revremark>")};
            result['$<<']("</revision>\n</revhistory>");};
          if ((($a = ((head_docinfo = doc.$docinfo()))['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            result['$<<'](head_docinfo)
          };
          if ((($a = doc['$attr?']("orgname")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<orgname>" + (doc.$attr("orgname")) + "</orgname>")};};
        result['$<<']("</" + (info_tag_prefix) + "info>");
        if (doc.$doctype()['$==']("manpage")) {
          result['$<<']("<refmeta>");
          if ((($a = doc['$attr?']("mantitle")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<refentrytitle>" + (doc.$attr("mantitle")) + "</refentrytitle>")};
          if ((($a = doc['$attr?']("manvolnum")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<manvolnum>" + (doc.$attr("manvolnum")) + "</manvolnum>")};
          result['$<<']("</refmeta>");
          result['$<<']("<refnamediv>");
          if ((($a = doc['$attr?']("manname")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<refname>" + (doc.$attr("manname")) + "</refname>")};
          if ((($a = doc['$attr?']("manpurpose")) !== nil && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<refpurpose>" + (doc.$attr("manpurpose")) + "</refpurpose>")};
          result['$<<']("</refnamediv>");};
        return $rb_times(result, $scope.get('EOL'));
      });

      Opal.defn(self, '$document_ns_attributes', function(doc) {
        var self = this;

        return " xmlns=\"http://docbook.org/ns/docbook\" xmlns:xl=\"http://www.w3.org/1999/xlink\" version=\"5.0\"";
      });

      Opal.defn(self, '$lang_attribute_name', function() {
        var self = this;

        return "xml:lang";
      });

      Opal.defn(self, '$document_title_tags', function(title) {
        var $a, self = this;

        if ((($a = title['$subtitle?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<title>" + (title.$main()) + "</title>\n<subtitle>" + (title.$subtitle()) + "</subtitle>"
          } else {
          return "<title>" + (title) + "</title>"
        };
      });

      Opal.defn(self, '$resolve_content', function(node) {
        var self = this;

        if (node.$content_model()['$==']("compound")) {
          return node.$content()
          } else {
          return "<simpara>" + (node.$content()) + "</simpara>"
        };
      });

      return (Opal.defn(self, '$title_tag', function(node, optional) {
        var $a, $b, self = this;

        if (optional == null) {
          optional = true
        }
        if ((($a = ((($b = optional['$!']()) !== false && $b !== nil) ? $b : node['$title?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<title>" + (node.$title()) + "</title>\n"
          } else {
          return nil
        };
      }), nil) && 'title_tag';
    })($scope.get('Converter'), (($scope.get('Converter')).$$scope.get('BuiltIn')))
  })($scope.base)
})(Opal);

/* Generated by Opal 0.9.0.beta2 */
(function(Opal) {
  Opal.dynamic_require_severity = "ignore";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
})(Opal);
