/* Generated by Opal 0.9.0.beta2 */
Opal.modules["emoji-inline-macro/extension"] = function(Opal) {
  Opal.dynamic_require_severity = "ignore";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$include', '$use_dsl', '$named', '$name_positional_attributes', '$default=', '$document', '$[]', '$attributes', '$attr?', '$key?', '$attr', '$image_uri', '$tr', '$at_location', '$join', '$dirname', '$handle_stylesheet', '$read_asset', '$*', '$chomp', '$normalize_system_path', '$>=', '$safe', '$!=', '$<', '$open', '$write']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {};
  self.$include(Opal.get('Asciidoctor'));
  (function($base, $super) {
    function $EmojiInlineMacro(){};
    var self = $EmojiInlineMacro = $klass($base, $super, 'EmojiInlineMacro', $EmojiInlineMacro);

    var def = self.$$proto, $scope = self.$$scope, $a, $b;

    self.$use_dsl();

    self.$named("emoji");

    self.$name_positional_attributes("size");

    Opal.cdecl($scope, 'SIZE_MAP', $hash2(["1x", "lg", "2x", "3x", "4x", "5x"], {"1x": 17, "lg": 24, "2x": 34, "3x": 50, "4x": 68, "5x": 85}));

    (($a = [24]), $b = $scope.get('SIZE_MAP'), $b['$default='].apply($b, $a), $a[$a.length-1]);

    return (Opal.defn(self, '$process', function(parent, target, attributes) {
      var $a, self = this, doc = nil, slash = nil, size = nil, cdn = nil, qtarget = nil, size_class = nil, emoji_name = nil;

      doc = parent.$document();
      if (doc.$attributes()['$[]']("emoji")['$==']("tortue")) {
        slash = (function() {if ((($a = (doc['$attr?']("htmlsyntax", "xml"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "/"
          } else {
          return nil
        }; return nil; })();
        size = $scope.get('SIZE_MAP')['$[]'](attributes['$[]']("size"));
        cdn = (function() {if ((($a = (attributes['$key?']("cdn"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return attributes['$[]']("cdn")
          } else {
          return (doc.$attr("emoji-cdn", "http://www.tortue.me/emoji/"))
        }; return nil; })();
        qtarget = "" + (cdn) + (target) + ".png";
        return "<img src=\"" + (parent.$image_uri(qtarget, nil)) + "\" height=\"" + (size) + "\" width=\"" + (size) + "\"" + (slash) + ">";
        } else {
        size_class = (function() {if ((($a = (size = attributes['$[]']("size"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " twa-" + (size)
          } else {
          return nil
        }; return nil; })();
        emoji_name = target.$tr("_", "-");
        return "<i class=\"twa" + (size_class) + " twa-" + (emoji_name) + "\"></i>";
      };
    }), nil) && 'process';
  })($scope.base, (($scope.get('Extensions')).$$scope.get('InlineMacroProcessor')));
  return (function($base, $super) {
    function $EmojiAssetsDocinfoProcessor(){};
    var self = $EmojiAssetsDocinfoProcessor = $klass($base, $super, 'EmojiAssetsDocinfoProcessor', $EmojiAssetsDocinfoProcessor);

    var def = self.$$proto, $scope = self.$$scope;

    self.$use_dsl();

    self.$at_location("header");

    Opal.defn(self, '$process', function(doc) {
      var $a, self = this, extdir = nil, stylesheet_name = nil, stylesheet_href = nil, content = nil;

      if (doc.$attributes()['$[]']("emoji")['$==']("tortue")) {
        return nil
        } else {
        extdir = Opal.get('File').$join(Opal.get('File').$dirname("emoji-inline-macro/extension"));
        stylesheet_name = "twemoji-awesome.css";
        if ((($a = doc['$attr?']("linkcss")) !== nil && (!$a.$$is_boolean || $a == true))) {
          stylesheet_href = self.$handle_stylesheet(doc, extdir, stylesheet_name);
          return "<link rel=\"stylesheet\" href=\"" + (stylesheet_href) + "\">";
          } else {
          content = doc.$read_asset("" + (extdir) + "/" + (stylesheet_name));
          return $rb_times(["<style>", content.$chomp(), "</style>"], "\n");
        };
      };
    });

    return (Opal.defn(self, '$handle_stylesheet', function(doc, extdir, stylesheet_name) {
      var $a, $b, $c, TMP_1, self = this, outdir = nil, stylesoutdir = nil, destination = nil, content = nil;

      outdir = (function() {if ((($a = (doc['$attr?']("outdir"))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (doc.$attr("outdir"))
        } else {
        return (doc.$attr("docdir"))
      }; return nil; })();
      stylesoutdir = doc.$normalize_system_path((doc.$attr("stylesdir")), outdir, ((function() {if ($rb_ge(doc.$safe(), (($scope.get('SafeMode')).$$scope.get('SAFE')))) {
        return outdir
        } else {
        return nil
      }; return nil; })()));
      if ((($a = ($b = ($c = stylesoutdir['$!='](extdir), $c !== false && $c !== nil ?$rb_lt(doc.$safe(), (($scope.get('SafeMode')).$$scope.get('SECURE'))) : $c), $b !== false && $b !== nil ?(doc['$attr?']("copycss")) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        destination = doc.$normalize_system_path(stylesheet_name, stylesoutdir, ((function() {if ($rb_ge(doc.$safe(), (($scope.get('SafeMode')).$$scope.get('SAFE')))) {
          return outdir
          } else {
          return nil
        }; return nil; })()));
        content = doc.$read_asset("" + (extdir) + "/" + (stylesheet_name));
        ($a = ($b = Opal.get('File')).$open, $a.$$p = (TMP_1 = function(f){var self = TMP_1.$$s || this;
if (f == null) f = nil;
        return f.$write(content)}, TMP_1.$$s = self, TMP_1), $a).call($b, destination, "w");
        return destination;
        } else {
        return "./" + (stylesheet_name)
      };
    }), nil) && 'handle_stylesheet';
  })($scope.base, (($scope.get('Extensions')).$$scope.get('DocinfoProcessor')));
};

/* Generated by Opal 0.9.0.beta2 */
(function(Opal) {
  Opal.dynamic_require_severity = "ignore";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require', '$register', '$basebackend?', '$inline_macro', '$docinfo_processor']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("emoji-inline-macro/extension")};
  return ($a = ($b = (($scope.get('Asciidoctor')).$$scope.get('Extensions'))).$register, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a;
    if (self.document == null) self.document = nil;

  if ((($a = self.document['$basebackend?']("html")) !== nil && (!$a.$$is_boolean || $a == true))) {
      self.$inline_macro($scope.get('EmojiInlineMacro'));
      return self.$docinfo_processor($scope.get('EmojiAssetsDocinfoProcessor'));
      } else {
      return nil
    }}, TMP_1.$$s = self, TMP_1), $a).call($b);
})(Opal);

/* Generated by Opal 0.9.0.beta2 */
(function(Opal) {
  Opal.dynamic_require_severity = "ignore";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
})(Opal);
