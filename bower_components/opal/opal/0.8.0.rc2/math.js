/* Generated by Opal 0.8.0.rc2 */
Opal.modules["math"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$===', '$raise', '$type_error', '$to_f', '$log', '$include']);
  return (function($base) {
    var self = $module($base, 'Math');

    var def = self.$$proto, $scope = self.$$scope, $a;

    (function($base, $super) {
      function $DomainError(){};
      var self = $DomainError = $klass($base, $super, 'DomainError', $DomainError);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      return (Opal.defs(self, '$new', TMP_1 = function(method) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        return Opal.find_super_dispatcher(self, 'new', TMP_1, null, $DomainError).apply(self, ["Numerical argument is out of domain - \"" + (method) + "\""]);
      }), nil) && 'new'
    })(self, $scope.get('StandardError'));

    Opal.cdecl($scope, 'E', Math.E);

    Opal.cdecl($scope, 'PI', Math.PI);

    Opal.defn(self, '$acos', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      x = x.$to_f();

      if (x < -1 || x > 1) {
        self.$raise($scope.get('DomainError'), "acos");
      }

      return Math.acos(x);
    ;
    });

    if ((($a = (typeof(Math.acosh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };

    Opal.defn(self, '$acosh', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.acosh(x.$to_f());
    ;
    });

    Opal.defn(self, '$asin', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      x = x.$to_f();

      if (x < -1 || x > 1) {
        self.$raise($scope.get('DomainError'), "asin");
      }

      return Math.asin(x);
    ;
    });

    if ((($a = (typeof(Math.asinh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    ;
    };

    Opal.defn(self, '$asinh', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.asinh(x.$to_f());
    ;
    });

    Opal.defn(self, '$atan', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.atan(x.$to_f());
    ;
    });

    Opal.defn(self, '$atan2', function(x, y) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      if (!$scope.get('Numeric')['$==='](y)) {
        self.$raise($scope.get('Opal').$type_error(y, $scope.get('Float')));
      }

      return Math.atan2(x.$to_f(), y.$to_f());
    ;
    });

    if ((($a = (typeof(Math.atanh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };

    Opal.defn(self, '$atanh', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      x = x.$to_f();

      if (x < -1 || x > 1) {
        self.$raise($scope.get('DomainError'), "atanh");
      }

      return Math.atanh(x);
    ;
    });

    Opal.defn(self, '$cbrt', function(x) {
      var self = this;

      return Math.cbrt(x);
    });

    Opal.defn(self, '$cos', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.cos(x.$to_f());
    ;
    });

    if ((($a = (typeof(Math.cosh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };

    Opal.defn(self, '$cosh', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.cosh(x.$to_f());
    ;
    });

    Opal.defn(self, '$erf', function(x) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$erfc', function(x) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$exp', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.exp(x.$to_f());
    ;
    });

    Opal.defn(self, '$frexp', function(x) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$gamma', function(x) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    });

    if ((($a = (typeof(Math.hypot) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    ;
    };

    Opal.defn(self, '$hypot', function(x, y) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      if (!$scope.get('Numeric')['$==='](y)) {
        self.$raise($scope.get('Opal').$type_error(y, $scope.get('Float')));
      }

      return Math.hypot(x.$to_f(), y.$to_f());
    ;
    });

    Opal.defn(self, '$ldexp', function(flt, int$) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$lgamma', function(x) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$log', function(num, base, method) {
      var $a, self = this;

      if (base == null) {
        base = $scope.get('E')
      }
      if (method == null) {
        method = nil
      }
      
      if (!$scope.get('Numeric')['$==='](num)) {
        self.$raise($scope.get('Opal').$type_error(num, $scope.get('Float')));
      }

      if (!$scope.get('Numeric')['$==='](base)) {
        self.$raise($scope.get('Opal').$type_error(base, $scope.get('Float')));
      }

      num  = num.$to_f();
      base = base.$to_f();

      if (num < 0) {
        self.$raise($scope.get('DomainError'), ((($a = method) !== false && $a !== nil) ? $a : "log"));
      }

      num = Math.log(num);

      if (base != Math.E) {
        num /= Math.log(base);
      }

      return num
    ;
    });

    if ((($a = (typeof(Math.log10) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      Opal.defn(self, '$log10', function(num) {
        var self = this;

        
        if (!$scope.get('Numeric')['$==='](num)) {
          self.$raise($scope.get('Opal').$type_error(num, $scope.get('Float')));
        }

        num = num.$to_f();

        if (num < 0) {
          self.$raise($scope.get('DomainError'), "log2");
        }

        return Math.log10(num);
      ;
      })
      } else {
      Opal.defn(self, '$log10', function(num) {
        var self = this;

        return self.$log(num, 10, "log10");
      })
    };

    if ((($a = (typeof(Math.log2) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      Opal.defn(self, '$log2', function(num) {
        var self = this;

        
        if (!$scope.get('Numeric')['$==='](num)) {
          self.$raise($scope.get('Opal').$type_error(num, $scope.get('Float')));
        }

        num = num.$to_f();

        if (num < 0) {
          self.$raise($scope.get('DomainError'), "log2");
        }

        return Math.log2(num);
      ;
      })
      } else {
      Opal.defn(self, '$log2', function(num) {
        var self = this;

        return self.$log(num, 2, "log2");
      })
    };

    Opal.defn(self, '$sin', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.sin(x.$to_f());
    ;
    });

    if ((($a = (typeof(Math.sinh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };

    Opal.defn(self, '$sinh', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.sinh(x.$to_f());
    ;
    });

    Opal.defn(self, '$sqrt', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      x = x.$to_f();

      if (x < 0) {
        self.$raise($scope.get('DomainError'), "log2");
      }

      return Math.sqrt(x);
    ;
    });

    Opal.defn(self, '$tan', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.tan(x.$to_f());
    ;
    });

    if ((($a = (typeof(Math.tanh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };

    Opal.defn(self, '$tanh', function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.tanh(x.$to_f());
    ;
    });

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$include($scope.get('Math'))
    })(self.$singleton_class());
  })(self)
};
