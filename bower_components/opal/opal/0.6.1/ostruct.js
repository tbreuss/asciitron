/* Generated by Opal 0.6.1 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $hash2 = $opal.hash2, $range = $opal.range;

  $opal.add_stubs(['$each_pair', '$[]=', '$to_sym', '$[]', '$end_with?', '$enum_for', '$is_a?', '$==', '$instance_variable_get', '$===', '$eql?', '$dup', '$to_n', '$hash', '$class', '$join', '$map', '$inspect']);
  return (function($base, $super) {
    function $OpenStruct(){};
    var self = $OpenStruct = $klass($base, $super, 'OpenStruct', $OpenStruct);

    var def = self._proto, $scope = self._scope, TMP_2;

    def.table = nil;
    def.$initialize = function(hash) {
      var $a, $b, TMP_1, self = this;

      if (hash == null) {
        hash = nil
      }
      self.table = $hash2([], {});
      if (hash !== false && hash !== nil) {
        return ($a = ($b = hash).$each_pair, $a._p = (TMP_1 = function(key, value){var self = TMP_1._s || this;
          if (self.table == null) self.table = nil;
if (key == null) key = nil;if (value == null) value = nil;
        return self.table['$[]='](key.$to_sym(), value)}, TMP_1._s = self, TMP_1), $a).call($b)
        } else {
        return nil
      };
    };

    def['$[]'] = function(name) {
      var self = this;

      return self.table['$[]'](name.$to_sym());
    };

    def['$[]='] = function(name, value) {
      var self = this;

      return self.table['$[]='](name.$to_sym(), value);
    };

    def.$method_missing = function(name, args) {
      var $a, self = this;

      args = $slice.call(arguments, 1);
      if ((($a = name['$end_with?']("=")) !== nil && (!$a._isBoolean || $a == true))) {
        return self.table['$[]='](name['$[]']($range(0, -2, false)).$to_sym(), args['$[]'](0))
        } else {
        return self.table['$[]'](name.$to_sym())
      };
    };

    def.$each_pair = TMP_2 = function() {
      var $a, $b, TMP_3, self = this, $iter = TMP_2._p, $yield = $iter || nil;

      TMP_2._p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_pair")
      };
      return ($a = ($b = self.table).$each_pair, $a._p = (TMP_3 = function(pair){var self = TMP_3._s || this, $a;
if (pair == null) pair = nil;
      return $a = $opal.$yield1($yield, pair), $a === $breaker ? $a : $a}, TMP_3._s = self, TMP_3), $a).call($b);
    };

    def['$=='] = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.OpenStruct)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$=='](other.$instance_variable_get("@table"));
    };

    def['$==='] = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.OpenStruct)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$==='](other.$instance_variable_get("@table"));
    };

    def['$eql?'] = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.OpenStruct)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$eql?'](other.$instance_variable_get("@table"));
    };

    def.$to_h = function() {
      var self = this;

      return self.table.$dup();
    };

    def.$to_n = function() {
      var self = this;

      return self.table.$to_n();
    };

    def.$hash = function() {
      var self = this;

      return self.table.$hash();
    };

    return (def.$inspect = function() {
      var $a, $b, TMP_4, self = this;

      return "#<" + (self.$class()) + ": " + (($a = ($b = self.$each_pair()).$map, $a._p = (TMP_4 = function(name, value){var self = TMP_4._s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (self['$[]'](name).$inspect())}, TMP_4._s = self, TMP_4), $a).call($b).$join(" ")) + ">";
    }, nil) && 'inspect';
  })(self, null)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/ostruct.js.map
;
