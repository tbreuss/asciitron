/* Generated by Opal 0.9.0.beta2 */
Opal.modules["template"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$[]=', '$keys', '$attr_reader', '$instance_exec', '$to_proc', '$new', '$<<', '$join']);
  return (function($base, $super) {
    function $Template(){};
    var self = $Template = $klass($base, $super, 'Template', $Template);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.name = def.body = nil;
    self._cache = $hash2([], {});

    Opal.defs(self, '$[]', function(name) {
      var $a, self = this;
      if (self._cache == null) self._cache = nil;

      return ((($a = self._cache['$[]'](name)) !== false && $a !== nil) ? $a : self._cache['$[]']("templates/" + (name)));
    });

    Opal.defs(self, '$[]=', function(name, instance) {
      var self = this;
      if (self._cache == null) self._cache = nil;

      return self._cache['$[]='](name, instance);
    });

    Opal.defs(self, '$paths', function() {
      var self = this;
      if (self._cache == null) self._cache = nil;

      return self._cache.$keys();
    });

    self.$attr_reader("body");

    Opal.defn(self, '$initialize', TMP_1 = function(name) {
      var $a, self = this, $iter = TMP_1.$$p, body = $iter || nil;

      TMP_1.$$p = null;
      $a = [name, body], self.name = $a[0], self.body = $a[1];
      return $scope.get('Template')['$[]='](name, self);
    });

    Opal.defn(self, '$inspect', function() {
      var self = this;

      return "#<Template: '" + (self.name) + "'>";
    });

    Opal.defn(self, '$render', function(ctx) {
      var $a, $b, self = this;

      if (ctx == null) {
        ctx = self
      }
      return ($a = ($b = ctx).$instance_exec, $a.$$p = self.body.$to_proc(), $a).call($b, $scope.get('OutputBuffer').$new());
    });

    return (function($base, $super) {
      function $OutputBuffer(){};
      var self = $OutputBuffer = $klass($base, $super, 'OutputBuffer', $OutputBuffer);

      var def = self.$$proto, $scope = self.$$scope;

      def.buffer = nil;
      Opal.defn(self, '$initialize', function() {
        var self = this;

        return self.buffer = [];
      });

      Opal.defn(self, '$append', function(str) {
        var self = this;

        return self.buffer['$<<'](str);
      });

      Opal.alias(self, 'append=', 'append');

      return (Opal.defn(self, '$join', function() {
        var self = this;

        return self.buffer.$join();
      }), nil) && 'join';
    })($scope.base, null);
  })($scope.base, null)
};
/* Generated by Opal 0.9.0.beta2 */
Opal.modules["erb"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$module_function']);
  self.$require("template");
  return (function($base, $super) {
    function $ERB(){};
    var self = $ERB = $klass($base, $super, 'ERB', $ERB);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base) {
      var self = $module($base, 'Util');

      var def = self.$$proto, $scope = self.$$scope;

      var escapes = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'};

      var escape_regexp = /[&<>"']/g;

      Opal.defn(self, '$html_escape', function(str) {
        var self = this;

        return ("" + str).replace(escape_regexp, function (m) { return escapes[m] });
      });

      Opal.alias(self, 'h', 'html_escape');

      self.$module_function("h");

      self.$module_function("html_escape");
    })($scope.base)
  })($scope.base, null);
};
