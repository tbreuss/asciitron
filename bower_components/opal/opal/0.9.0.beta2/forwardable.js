/* Generated by Opal 0.9.0.beta2 */
Opal.modules["forwardable"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$each', '$respond_to?', '$def_instance_delegator', '$include?', '$start_with?', '$to_s', '$define_method', '$__send__', '$to_proc', '$instance_variable_get', '$def_single_delegator', '$define_singleton_method']);
  (function($base) {
    var self = $module($base, 'Forwardable');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$instance_delegate', function(hash) {
      var $a, $b, TMP_1, self = this;

      return ($a = ($b = hash).$each, $a.$$p = (TMP_1 = function(methods, accessor){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (methods == null) methods = nil;if (accessor == null) accessor = nil;
      if ((($a = methods['$respond_to?']("each")) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          methods = [methods]
        };
        return ($a = ($b = methods).$each, $a.$$p = (TMP_2 = function(method){var self = TMP_2.$$s || this;
if (method == null) method = nil;
        return self.$def_instance_delegator(accessor, method)}, TMP_2.$$s = self, TMP_2), $a).call($b);}, TMP_1.$$s = self, TMP_1), $a).call($b);
    });

    Opal.defn(self, '$def_instance_delegators', function(accessor) {
      var $a, $b, TMP_3, self = this;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var methods = new Array(array_size);
      for(var arg_index = 0; arg_index < array_size; arg_index++) {
        methods[arg_index] = arguments[arg_index + 1];
      }
      return ($a = ($b = methods).$each, $a.$$p = (TMP_3 = function(method){var self = TMP_3.$$s || this, $a;
if (method == null) method = nil;
      if ((($a = ["__send__", "__id__"]['$include?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil;};
        return self.$def_instance_delegator(accessor, method);}, TMP_3.$$s = self, TMP_3), $a).call($b);
    });

    Opal.defn(self, '$def_instance_delegator', function(accessor, method, ali) {
      var $a, $b, TMP_4, $c, TMP_5, self = this;

      if (ali == null) {
        ali = method
      }
      if ((($a = accessor.$to_s()['$start_with?']("@")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_4 = function(args){var self = TMP_4.$$s || this, block, $a, $b;
args = $slice.call(arguments, 0);
          block = TMP_4.$$p || nil, TMP_4.$$p = null;
        return ($a = ($b = self.$instance_variable_get(accessor)).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [method].concat(Opal.to_a(args)))}, TMP_4.$$s = self, TMP_4), $a).call($b, ali)
        } else {
        return ($a = ($c = self).$define_method, $a.$$p = (TMP_5 = function(args){var self = TMP_5.$$s || this, block, $a, $b;
args = $slice.call(arguments, 0);
          block = TMP_5.$$p || nil, TMP_5.$$p = null;
        return ($a = ($b = self.$__send__(accessor)).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [method].concat(Opal.to_a(args)))}, TMP_5.$$s = self, TMP_5), $a).call($c, ali)
      };
    });

    Opal.alias(self, 'delegate', 'instance_delegate');

    Opal.alias(self, 'def_delegators', 'def_instance_delegators');

    Opal.alias(self, 'def_delegator', 'def_instance_delegator');
  })($scope.base);
  return (function($base) {
    var self = $module($base, 'SingleForwardable');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$single_delegate', function(hash) {
      var $a, $b, TMP_6, self = this;

      return ($a = ($b = hash).$each, $a.$$p = (TMP_6 = function(methods, accessor){var self = TMP_6.$$s || this, $a, $b, TMP_7;
if (methods == null) methods = nil;if (accessor == null) accessor = nil;
      if ((($a = methods['$respond_to?']("each")) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          methods = [methods]
        };
        return ($a = ($b = methods).$each, $a.$$p = (TMP_7 = function(method){var self = TMP_7.$$s || this;
if (method == null) method = nil;
        return self.$def_single_delegator(accessor, method)}, TMP_7.$$s = self, TMP_7), $a).call($b);}, TMP_6.$$s = self, TMP_6), $a).call($b);
    });

    Opal.defn(self, '$def_single_delegators', function(accessor) {
      var $a, $b, TMP_8, self = this;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var methods = new Array(array_size);
      for(var arg_index = 0; arg_index < array_size; arg_index++) {
        methods[arg_index] = arguments[arg_index + 1];
      }
      return ($a = ($b = methods).$each, $a.$$p = (TMP_8 = function(method){var self = TMP_8.$$s || this, $a;
if (method == null) method = nil;
      if ((($a = ["__send__", "__id__"]['$include?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil;};
        return self.$def_single_delegator(accessor, method);}, TMP_8.$$s = self, TMP_8), $a).call($b);
    });

    Opal.defn(self, '$def_single_delegator', function(accessor, method, ali) {
      var $a, $b, TMP_9, $c, TMP_10, self = this;

      if (ali == null) {
        ali = method
      }
      if ((($a = accessor.$to_s()['$start_with?']("@")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_9 = function(args){var self = TMP_9.$$s || this, block, $a, $b;
args = $slice.call(arguments, 0);
          block = TMP_9.$$p || nil, TMP_9.$$p = null;
        return ($a = ($b = self.$instance_variable_get(accessor)).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [method].concat(Opal.to_a(args)))}, TMP_9.$$s = self, TMP_9), $a).call($b, ali)
        } else {
        return ($a = ($c = self).$define_singleton_method, $a.$$p = (TMP_10 = function(args){var self = TMP_10.$$s || this, block, $a, $b;
args = $slice.call(arguments, 0);
          block = TMP_10.$$p || nil, TMP_10.$$p = null;
        return ($a = ($b = self.$__send__(accessor)).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [method].concat(Opal.to_a(args)))}, TMP_10.$$s = self, TMP_10), $a).call($c, ali)
      };
    });

    Opal.alias(self, 'delegate', 'single_delegate');

    Opal.alias(self, 'def_delegators', 'def_single_delegators');

    Opal.alias(self, 'def_delegator', 'def_single_delegator');
  })($scope.base);
};
