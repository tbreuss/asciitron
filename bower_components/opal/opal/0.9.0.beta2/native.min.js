Opal.modules["native"]=function(Opal){Opal.dynamic_require_severity="warning";var OPAL_CONFIG={method_missing:true,arity_check:false,freezing:true,tainting:true};function $rb_minus(lhs,rhs){return typeof lhs==="number"&&typeof rhs==="number"?lhs-rhs:lhs["$-"](rhs)}function $rb_ge(lhs,rhs){return typeof lhs==="number"&&typeof rhs==="number"?lhs>=rhs:lhs["$>="](rhs)}var self=Opal.top,$scope=Opal,nil=Opal.nil,$breaker=Opal.breaker,$slice=Opal.slice,$module=Opal.module,$range=Opal.range,$hash2=Opal.hash2,$klass=Opal.klass,$gvars=Opal.gvars;Opal.add_stubs(["$try_convert","$native?","$respond_to?","$to_n","$raise","$inspect","$Native","$proc","$map!","$end_with?","$define_method","$[]","$convert","$call","$to_proc","$new","$each","$native_reader","$native_writer","$extend","$alias_method","$to_a","$_Array","$include","$method_missing","$bind","$instance_method","$[]=","$slice","$-","$length","$enum_for","$===","$>=","$<<","$each_pair","$_initialize","$name","$exiting_mid","$native_module"]);(function($base){var self=$module($base,"Native");var def=self.$$proto,$scope=self.$$scope,TMP_1,TMP_2;Opal.defs(self,"$is_a?",function(object,klass){var self=this;try{return object instanceof self.$try_convert(klass)}catch(e){return false}});Opal.defs(self,"$try_convert",function(value){var self=this;if(self["$native?"](value)){return value}else if(value["$respond_to?"]("to_n")){return value.$to_n()}else{return nil}});Opal.defs(self,"$convert",function(value){var self=this;if(self["$native?"](value)){return value}else if(value["$respond_to?"]("to_n")){return value.$to_n()}else{self.$raise($scope.get("ArgumentError"),""+value.$inspect()+" isn't native")}});Opal.defs(self,"$call",TMP_1=function(obj,key){var self=this,$iter=TMP_1.$$p,block=$iter||nil;var array_size=arguments.length-2;if(array_size<0)array_size=0;var args=new Array(array_size);for(var arg_index=0;arg_index<array_size;arg_index++){args[arg_index]=arguments[arg_index+2]}TMP_1.$$p=null;var prop=obj[key];if(prop instanceof Function){var converted=new Array(args.length);for(var i=0,length=args.length;i<length;i++){var item=args[i],conv=self.$try_convert(item);converted[i]=conv===nil?item:conv}if(block!==nil){converted.push(block)}return self.$Native(prop.apply(obj,converted))}else{return self.$Native(prop)}});Opal.defs(self,"$proc",TMP_2=function(){var $a,$b,TMP_3,self=this,$iter=TMP_2.$$p,block=$iter||nil;TMP_2.$$p=null;if(block!==false&&block!==nil){}else{self.$raise($scope.get("LocalJumpError"),"no block given")}return($a=($b=$scope.get("Kernel")).$proc,$a.$$p=(TMP_3=function(args){var self=TMP_3.$$s||this,$a,$b,TMP_4,instance=nil;args=$slice.call(arguments,0);($a=($b=args)["$map!"],$a.$$p=(TMP_4=function(arg){var self=TMP_4.$$s||this;if(arg==null)arg=nil;return self.$Native(arg)},TMP_4.$$s=self,TMP_4),$a).call($b);instance=self.$Native(this);if(this===Opal.global){return block.apply(self,args)}var self_=block.$$s;block.$$s=null;try{return block.apply(instance,args)}finally{block.$$s=self_}},TMP_3.$$s=self,TMP_3),$a).call($b)});(function($base){var self=$module($base,"Helpers");var def=self.$$proto,$scope=self.$$scope;Opal.defn(self,"$alias_native",function(new$,old,$kwargs){var $a,$b,TMP_5,$c,TMP_6,$d,TMP_7,self=this,as=nil;if(old==null){old=new$}if(old==null){$kwargs=$hash2([],{})}else if(old.$$is_hash){$kwargs=old;old=new$}else if($kwargs==null){$kwargs=$hash2([],{})}if(!$kwargs.$$is_hash){throw Opal.ArgumentError.$new("expecting keyword args")}if((as=$kwargs.smap["as"])==null){as=nil}if(($a=old["$end_with?"]("="))!==nil&&(!$a.$$is_boolean||$a==true)){return($a=($b=self).$define_method,$a.$$p=(TMP_5=function(value){var self=TMP_5.$$s||this;if(self["native"]==null)self["native"]=nil;if(value==null)value=nil;self["native"][old["$[]"]($range(0,-2,false))]=$scope.get("Native").$convert(value);return value},TMP_5.$$s=self,TMP_5),$a).call($b,new$)}else if(as!==false&&as!==nil){return($a=($c=self).$define_method,$a.$$p=(TMP_6=function(args){var self=TMP_6.$$s||this,block,$a,$b,$c,value=nil;if(self["native"]==null)self["native"]=nil;args=$slice.call(arguments,0);block=TMP_6.$$p||nil,TMP_6.$$p=null;if(($a=value=($b=($c=$scope.get("Native")).$call,$b.$$p=block.$to_proc(),$b).apply($c,[self["native"],old].concat(Opal.to_a(args))))!==nil&&(!$a.$$is_boolean||$a==true)){return as.$new(value.$to_n())}else{return nil}},TMP_6.$$s=self,TMP_6),$a).call($c,new$)}else{return($a=($d=self).$define_method,$a.$$p=(TMP_7=function(args){var self=TMP_7.$$s||this,block,$a,$b;if(self["native"]==null)self["native"]=nil;args=$slice.call(arguments,0);block=TMP_7.$$p||nil,TMP_7.$$p=null;return($a=($b=$scope.get("Native")).$call,$a.$$p=block.$to_proc(),$a).apply($b,[self["native"],old].concat(Opal.to_a(args)))},TMP_7.$$s=self,TMP_7),$a).call($d,new$)}});Opal.defn(self,"$native_reader",function(){var $a,$b,TMP_8,self=this;var array_size=arguments.length-0;if(array_size<0)array_size=0;var names=new Array(array_size);for(var arg_index=0;arg_index<array_size;arg_index++){names[arg_index]=arguments[arg_index+0]}return($a=($b=names).$each,$a.$$p=(TMP_8=function(name){var self=TMP_8.$$s||this,$a,$b,TMP_9;if(name==null)name=nil;return($a=($b=self).$define_method,$a.$$p=(TMP_9=function(){var self=TMP_9.$$s||this;if(self["native"]==null)self["native"]=nil;return self.$Native(self["native"][name])},TMP_9.$$s=self,TMP_9),$a).call($b,name)},TMP_8.$$s=self,TMP_8),$a).call($b)});Opal.defn(self,"$native_writer",function(){var $a,$b,TMP_10,self=this;var array_size=arguments.length-0;if(array_size<0)array_size=0;var names=new Array(array_size);for(var arg_index=0;arg_index<array_size;arg_index++){names[arg_index]=arguments[arg_index+0]}return($a=($b=names).$each,$a.$$p=(TMP_10=function(name){var self=TMP_10.$$s||this,$a,$b,TMP_11;if(name==null)name=nil;return($a=($b=self).$define_method,$a.$$p=(TMP_11=function(value){var self=TMP_11.$$s||this;if(self["native"]==null)self["native"]=nil;if(value==null)value=nil;return self.$Native(self["native"][name]=value)},TMP_11.$$s=self,TMP_11),$a).call($b,""+name+"=")},TMP_10.$$s=self,TMP_10),$a).call($b)});Opal.defn(self,"$native_accessor",function(){var $a,$b,self=this;var array_size=arguments.length-0;if(array_size<0)array_size=0;var names=new Array(array_size);for(var arg_index=0;arg_index<array_size;arg_index++){names[arg_index]=arguments[arg_index+0]}($a=self).$native_reader.apply($a,Opal.to_a(names));return($b=self).$native_writer.apply($b,Opal.to_a(names))})})($scope.base);Opal.defs(self,"$included",function(klass){var self=this;return klass.$extend($scope.get("Helpers"))});Opal.defn(self,"$initialize",function(native$){var $a,self=this;if(($a=$scope.get("Kernel")["$native?"](native$))!==nil&&(!$a.$$is_boolean||$a==true)){}else{$scope.get("Kernel").$raise($scope.get("ArgumentError"),""+native$.$inspect()+" isn't native")}return self["native"]=native$});Opal.defn(self,"$to_n",function(){var self=this;if(self["native"]==null)self["native"]=nil;return self["native"]})})($scope.base);(function($base){var self=$module($base,"Kernel");var def=self.$$proto,$scope=self.$$scope,TMP_12;Opal.defn(self,"$native?",function(value){var self=this;return value==null||!value.$$class});Opal.defn(self,"$Native",function(obj){var $a,self=this;if(($a=obj==null)!==nil&&(!$a.$$is_boolean||$a==true)){return nil}else if(($a=self["$native?"](obj))!==nil&&(!$a.$$is_boolean||$a==true)){return $scope.get("Native").$$scope.get("Object").$new(obj)}else{return obj}});self.$alias_method("_Array","Array");Opal.defn(self,"$Array",TMP_12=function(object){var $a,$b,self=this,$iter=TMP_12.$$p,block=$iter||nil;var array_size=arguments.length-1;if(array_size<0)array_size=0;var args=new Array(array_size);for(var arg_index=0;arg_index<array_size;arg_index++){args[arg_index]=arguments[arg_index+1]}TMP_12.$$p=null;if(($a=self["$native?"](object))!==nil&&(!$a.$$is_boolean||$a==true)){return($a=($b=$scope.get("Native").$$scope.get("Array")).$new,$a.$$p=block.$to_proc(),$a).apply($b,[object].concat(Opal.to_a(args))).$to_a()}return self.$_Array(object)})})($scope.base);(function($base,$super){function $Object(){}var self=$Object=$klass($base,$super,"Object",$Object);var def=self.$$proto,$scope=self.$$scope,TMP_13,TMP_14,TMP_15;def["native"]=nil;self.$include(Opal.get("Native"));Opal.defn(self,"$==",function(other){var self=this;return self["native"]===$scope.get("Native").$try_convert(other)});Opal.defn(self,"$has_key?",function(name){var self=this;return Opal.hasOwnProperty.call(self["native"],name)});Opal.alias(self,"key?","has_key?");Opal.alias(self,"include?","has_key?");Opal.alias(self,"member?","has_key?");Opal.defn(self,"$each",TMP_13=function(){var $a,self=this,$iter=TMP_13.$$p,$yield=$iter||nil;var array_size=arguments.length-0;if(array_size<0)array_size=0;var args=new Array(array_size);for(var arg_index=0;arg_index<array_size;arg_index++){args[arg_index]=arguments[arg_index+0]}TMP_13.$$p=null;if($yield!==nil){for(var key in self["native"]){($a=Opal.yieldX($yield,[key,self["native"][key]]))===$breaker?$breaker.$v:$a}return self}else{return($a=self).$method_missing.apply($a,["each"].concat(Opal.to_a(args)))}});Opal.defn(self,"$[]",function(key){var self=this;var prop=self["native"][key];if(prop instanceof Function){return prop}else{return Opal.get("Native").$call(self["native"],key)}});Opal.defn(self,"$[]=",function(key,value){var $a,self=this,native$=nil;native$=$scope.get("Native").$try_convert(value);if(($a=native$===nil)!==nil&&(!$a.$$is_boolean||$a==true)){return self["native"][key]=value}else{return self["native"][key]=native$}});Opal.defn(self,"$merge!",function(other){var self=this;other=$scope.get("Native").$convert(other);for(var prop in other){self["native"][prop]=other[prop]}return self});Opal.defn(self,"$respond_to?",function(name,include_all){var self=this;if(include_all==null){include_all=false}return $scope.get("Kernel").$instance_method("respond_to?").$bind(self).$call(name,include_all)});Opal.defn(self,"$respond_to_missing?",function(name,include_all){var self=this;if(include_all==null){include_all=false}return Opal.hasOwnProperty.call(self["native"],name)});Opal.defn(self,"$method_missing",TMP_14=function(mid){var $a,$b,self=this,$iter=TMP_14.$$p,block=$iter||nil;var array_size=arguments.length-1;if(array_size<0)array_size=0;var args=new Array(array_size);for(var arg_index=0;arg_index<array_size;arg_index++){args[arg_index]=arguments[arg_index+1]}TMP_14.$$p=null;if(mid.charAt(mid.length-1)==="="){return self["$[]="](mid.$slice(0,$rb_minus(mid.$length(),1)),args["$[]"](0))}else{return($a=($b=Opal.get("Native")).$call,$a.$$p=block.$to_proc(),$a).apply($b,[self["native"],mid].concat(Opal.to_a(args)))}});Opal.defn(self,"$nil?",function(){var self=this;return false});Opal.defn(self,"$is_a?",function(klass){var self=this;return Opal.is_a(self,klass)});Opal.alias(self,"kind_of?","is_a?");Opal.defn(self,"$instance_of?",function(klass){var self=this;return self.$$class===klass});Opal.defn(self,"$class",function(){var self=this;return self.$$class});Opal.defn(self,"$to_a",TMP_15=function(options){var $a,$b,self=this,$iter=TMP_15.$$p,block=$iter||nil;if(options==null){options=$hash2([],{})}TMP_15.$$p=null;return($a=($b=$scope.get("Native").$$scope.get("Array")).$new,$a.$$p=block.$to_proc(),$a).call($b,self["native"],options).$to_a()});return(Opal.defn(self,"$inspect",function(){var self=this;return"#<Native:"+String(self["native"])+">"}),nil)&&"inspect"})($scope.get("Native"),$scope.get("BasicObject"));(function($base,$super){function $Array(){}var self=$Array=$klass($base,$super,"Array",$Array);var def=self.$$proto,$scope=self.$$scope,TMP_16,TMP_17;def.named=def["native"]=def.get=def.block=def.set=def.length=nil;self.$include($scope.get("Native"));self.$include($scope.get("Enumerable"));Opal.defn(self,"$initialize",TMP_16=function(native$,options){var $a,self=this,$iter=TMP_16.$$p,block=$iter||nil;if(options==null){options=$hash2([],{})}TMP_16.$$p=null;Opal.find_super_dispatcher(self,"initialize",TMP_16,null).apply(self,[native$]);self.get=($a=options["$[]"]("get"))!==false&&$a!==nil?$a:options["$[]"]("access");self.named=options["$[]"]("named");self.set=($a=options["$[]"]("set"))!==false&&$a!==nil?$a:options["$[]"]("access");self.length=($a=options["$[]"]("length"))!==false&&$a!==nil?$a:"length";self.block=block;if(($a=self.$length()==null)!==nil&&(!$a.$$is_boolean||$a==true)){return self.$raise($scope.get("ArgumentError"),"no length found on the array-like object")}else{return nil}});Opal.defn(self,"$each",TMP_17=function(){var self=this,$iter=TMP_17.$$p,block=$iter||nil;TMP_17.$$p=null;if(block!==false&&block!==nil){}else{return self.$enum_for("each")}for(var i=0,length=self.$length();i<length;i++){var value=Opal.yield1(block,self["$[]"](i));if(value===$breaker){return $breaker.$v}}return self});Opal.defn(self,"$[]",function(index){var $a,self=this,result=nil,$case=nil;result=function(){$case=index;if($scope.get("String")["$==="]($case)||$scope.get("Symbol")["$==="]($case)){if(($a=self.named)!==nil&&(!$a.$$is_boolean||$a==true)){return self["native"][self.named](index)}else{return self["native"][index]}}else if($scope.get("Integer")["$==="]($case)){if(($a=self.get)!==nil&&(!$a.$$is_boolean||$a==true)){return self["native"][self.get](index)}else{return self["native"][index]}}else{return nil}}();if(result!==false&&result!==nil){if(($a=self.block)!==nil&&(!$a.$$is_boolean||$a==true)){return self.block.$call(result)}else{return self.$Native(result)}}else{return nil}});Opal.defn(self,"$[]=",function(index,value){var $a,self=this;if(($a=self.set)!==nil&&(!$a.$$is_boolean||$a==true)){return self["native"][self.set](index,$scope.get("Native").$convert(value))}else{return self["native"][index]=$scope.get("Native").$convert(value)}});Opal.defn(self,"$last",function(count){var $a,self=this,index=nil,result=nil;if(count==null){count=nil}if(count!==false&&count!==nil){index=$rb_minus(self.$length(),1);result=[];while($rb_ge(index,0)){result["$<<"](self["$[]"](index));index=$rb_minus(index,1)}return result}else{return self["$[]"]($rb_minus(self.$length(),1))}});Opal.defn(self,"$length",function(){var self=this;return self["native"][self.length]});Opal.alias(self,"to_ary","to_a");return(Opal.defn(self,"$inspect",function(){var self=this;return self.$to_a().$inspect()}),nil)&&"inspect"})($scope.get("Native"),null);(function($base,$super){function $Numeric(){}var self=$Numeric=$klass($base,$super,"Numeric",$Numeric);var def=self.$$proto,$scope=self.$$scope;return(Opal.defn(self,"$to_n",function(){var self=this;return self.valueOf()}),nil)&&"to_n"})($scope.base,null);(function($base,$super){function $Proc(){}var self=$Proc=$klass($base,$super,"Proc",$Proc);var def=self.$$proto,$scope=self.$$scope;return(Opal.defn(self,"$to_n",function(){var self=this;return self}),nil)&&"to_n"})($scope.base,null);(function($base,$super){function $String(){}var self=$String=$klass($base,$super,"String",$String);var def=self.$$proto,$scope=self.$$scope;return(Opal.defn(self,"$to_n",function(){var self=this;return self.valueOf()}),nil)&&"to_n"})($scope.base,null);(function($base,$super){function $Regexp(){}var self=$Regexp=$klass($base,$super,"Regexp",$Regexp);var def=self.$$proto,$scope=self.$$scope;return(Opal.defn(self,"$to_n",function(){var self=this;return self.valueOf()}),nil)&&"to_n"})($scope.base,null);(function($base,$super){function $MatchData(){}var self=$MatchData=$klass($base,$super,"MatchData",$MatchData);var def=self.$$proto,$scope=self.$$scope;def.matches=nil;return(Opal.defn(self,"$to_n",function(){var self=this;return self.matches}),nil)&&"to_n"})($scope.base,null);(function($base,$super){function $Struct(){}var self=$Struct=$klass($base,$super,"Struct",$Struct);var def=self.$$proto,$scope=self.$$scope;return(Opal.defn(self,"$to_n",function(){var $a,$b,TMP_18,self=this,result=nil;result={};($a=($b=self).$each_pair,$a.$$p=(TMP_18=function(name,value){var self=TMP_18.$$s||this;if(name==null)name=nil;if(value==null)value=nil;return result[name]=value.$to_n()},TMP_18.$$s=self,TMP_18),$a).call($b);return result}),nil)&&"to_n"})($scope.base,null);(function($base,$super){function $Array(){}var self=$Array=$klass($base,$super,"Array",$Array);var def=self.$$proto,$scope=self.$$scope;return(Opal.defn(self,"$to_n",function(){var self=this;var result=[];for(var i=0,length=self.length;i<length;i++){var obj=self[i];if(obj["$respond_to?"]("to_n")){result.push(obj.$to_n())}else{result.push(obj)}}return result}),nil)&&"to_n"})($scope.base,null);(function($base,$super){function $Boolean(){}var self=$Boolean=$klass($base,$super,"Boolean",$Boolean);var def=self.$$proto,$scope=self.$$scope;return(Opal.defn(self,"$to_n",function(){var self=this;return self.valueOf()}),nil)&&"to_n"})($scope.base,null);(function($base,$super){function $Time(){}var self=$Time=$klass($base,$super,"Time",$Time);var def=self.$$proto,$scope=self.$$scope;return(Opal.defn(self,"$to_n",function(){var self=this;return self}),nil)&&"to_n"})($scope.base,null);(function($base,$super){function $NilClass(){}var self=$NilClass=$klass($base,$super,"NilClass",$NilClass);var def=self.$$proto,$scope=self.$$scope;return(Opal.defn(self,"$to_n",function(){var self=this;return null}),nil)&&"to_n"})($scope.base,null);(function($base,$super){function $Hash(){}var self=$Hash=$klass($base,$super,"Hash",$Hash);var def=self.$$proto,$scope=self.$$scope,TMP_19;self.$alias_method("_initialize","initialize");Opal.defn(self,"$initialize",TMP_19=function(defaults){var $a,$b,self=this,$iter=TMP_19.$$p,block=$iter||nil;TMP_19.$$p=null;if(defaults!==undefined&&defaults.constructor===Object){var smap=self.smap,keys=self.keys,key,value;for(key in defaults){value=defaults[key];if(value&&value.constructor===Object){smap[key]=$scope.get("Hash").$new(value)}else if(value&&value.$$is_array){value=value.map(function(item){if(item&&item.constructor===Object){return $scope.get("Hash").$new(item)}return item});smap[key]=value}else{smap[key]=self.$Native(value)}keys.push(key)}return self}return($a=($b=self).$_initialize,$a.$$p=block.$to_proc(),$a).call($b,defaults)});return(Opal.defn(self,"$to_n",function(){var self=this;var result={},keys=self.keys,smap=self.smap,key,value;for(var i=0,length=keys.length;i<length;i++){key=keys[i];if(key.$$is_string){value=smap[key]}else{key=key.key;value=key.value}if(value["$respond_to?"]("to_n")){result[key]=value.$to_n()}else{result[key]=value}}return result}),nil)&&"to_n"})($scope.base,null);(function($base,$super){function $Module(){}var self=$Module=$klass($base,$super,"Module",$Module);var def=self.$$proto,$scope=self.$$scope;return(Opal.defn(self,"$native_module",function(){var self=this;return Opal.global[self.$name()]=self}),nil)&&"native_module"})($scope.base,null);(function($base,$super){function $Class(){}var self=$Class=$klass($base,$super,"Class",$Class);var def=self.$$proto,$scope=self.$$scope;Opal.defn(self,"$native_alias",function(new_jsid,existing_mid){var self=this;var aliased=self.$$proto["$"+existing_mid];if(!aliased){self.$raise($scope.get("NameError").$new("undefined method `"+existing_mid+"' for class `"+self.$inspect()+"'",self.$exiting_mid()))}self.$$proto[new_jsid]=aliased});return(Opal.defn(self,"$native_class",function(){var self=this;self.$native_module();self["new"]=self.$new}),nil)&&"native_class"})($scope.base,null);return $gvars.$=$gvars.global=self.$Native(Opal.global)};
