/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $hash2 = $opal.hash2;

  $opal.add_stubs(['$respond_to?', '$raise', '$to_s', '$[]=', '$delete', '$clear', '$size', '$each', '$send']);
  return (function($base) {
    var self = $module($base, 'Observable');

    var def = self._proto, $scope = self._scope;

    def.$add_observer = function(observer, func) {
      var $a, $b, self = this;
      if (self.observer_peers == null) self.observer_peers = nil;

      if (func == null) {
        func = "update"
      }
      if ((($a = (($b = self['observer_peers'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.observer_peers = $hash2([], {})
      };
      if ((($a = observer['$respond_to?'](func)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.NoMethodError, "observer does not respond to `" + (func.$to_s()) + "'")
      };
      return self.observer_peers['$[]='](observer, func);
    };

    def.$delete_observer = function(observer) {
      var $a, $b, self = this;
      if (self.observer_peers == null) self.observer_peers = nil;

      if ((($a = (($b = self['observer_peers'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a._isBoolean || $a == true))) {
        return self.observer_peers.$delete(observer)
        } else {
        return nil
      };
    };

    def.$delete_observers = function() {
      var $a, $b, self = this;
      if (self.observer_peers == null) self.observer_peers = nil;

      if ((($a = (($b = self['observer_peers'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a._isBoolean || $a == true))) {
        return self.observer_peers.$clear()
        } else {
        return nil
      };
    };

    def.$count_observers = function() {
      var $a, $b, self = this;
      if (self.observer_peers == null) self.observer_peers = nil;

      if ((($a = (($b = self['observer_peers'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a._isBoolean || $a == true))) {
        return self.observer_peers.$size()
        } else {
        return 0
      };
    };

    def.$changed = function(state) {
      var self = this;

      if (state == null) {
        state = true
      }
      return self.observer_state = state;
    };

    def['$changed?'] = function() {
      var $a, $b, $c, self = this;
      if (self.observer_state == null) self.observer_state = nil;

      if ((($a = ($b = (($c = self['observer_state'], $c != null && $c !== nil) ? 'instance-variable' : nil), $b !== false && $b !== nil ?self.observer_state : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true
        } else {
        return false
      };
    };

    def.$notify_observers = function(arg) {
      var $a, $b, $c, TMP_1, self = this;
      if (self.observer_state == null) self.observer_state = nil;
      if (self.observer_peers == null) self.observer_peers = nil;

      arg = $slice.call(arguments, 0);
      if ((($a = ($b = (($c = self['observer_state'], $c != null && $c !== nil) ? 'instance-variable' : nil), $b !== false && $b !== nil ?self.observer_state : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = (($b = self['observer_peers'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a._isBoolean || $a == true))) {
          ($a = ($b = self.observer_peers).$each, $a._p = (TMP_1 = function(k, v){var self = TMP_1._s || this, $a;
if (k == null) k = nil;if (v == null) v = nil;
          return ($a = k).$send.apply($a, [v].concat(arg))}, TMP_1._s = self, TMP_1), $a).call($b)};
        return self.observer_state = false;
        } else {
        return nil
      };
    };
        ;$opal.donate(self, ["$add_observer", "$delete_observer", "$delete_observers", "$count_observers", "$changed", "$changed?", "$notify_observers"]);
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/observer.js.map
;
