/* Generated by Opal 0.9.0.beta2 */
Opal.modules["nodejs/kernel"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$to_str', '$new', '$to_s']);
  Opal.exit = process.exit;
  (function($base) {
    var self = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'NODE_REQUIRE', require);

    Opal.defn(self, '$caller', function() {
      var self = this;

      
      var stack;
      try {
        var err = Error("my error");
        throw err;
      } catch(e) {
        stack = e.stack;
      }
      return stack.$split("\n").slice(3);
    
    });

    Opal.defn(self, '$node_require', function(path) {
      var self = this;

      return $scope.get('NODE_REQUIRE')(path.$to_str());
    });
  })($scope.base);
  Opal.cdecl($scope, 'ARGV', process.argv.slice(2));
  Opal.cdecl($scope, 'ENV', $scope.get('Object').$new());
  Opal.defs($scope.get('ENV'), '$[]=', function(name, value) {
    var self = this;

    return process.env[name.$to_s()] = value.$to_s();
  });
  return (Opal.defs($scope.get('ENV'), '$[]', function(name) {
    var self = this;

    return process.env[name] || nil;
  }), nil) && '[]';
};
/* Generated by Opal 0.9.0.beta2 */
Opal.modules["nodejs/file"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$node_require', '$size', '$join', '$raise', '$message', '$error', '$call', '$exist?', '$new', '$close', '$gsub', '$attr_reader']);
  return (function($base, $super) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;
    if (self.__fs__ == null) self.__fs__ = nil;
    if (self.__path__ == null) self.__path__ = nil;

    def.fd = nil;
    self.$include(((Opal.get('IO')).$$scope.get('Writable')));

    self.$include(((Opal.get('IO')).$$scope.get('Readable')));

    self.__fs__ = self.$node_require("fs");

    self.__path__ = self.$node_require("path");

    var __fs__ = self.__fs__;

    var __path__ = self.__path__;

    Opal.defs(self, '$read', function(path) {
      var self = this;

      return __fs__.readFileSync(path).toString();
    });

    Opal.defs(self, '$write', function(path, data) {
      var self = this;

      __fs__.writeFileSync(path, data);
      return data.$size();
    });

    Opal.defs(self, '$exist?', function(path) {
      var self = this;

      return __fs__.existsSync(path);
    });

    Opal.defs(self, '$realpath', TMP_1 = function(pathname, dir_string, cache) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (dir_string == null) {
        dir_string = nil
      }
      if (cache == null) {
        cache = nil
      }
      TMP_1.$$p = null;
      if (dir_string !== false && dir_string !== nil) {
        pathname = self.$join(dir_string, pathname)};
      if ((block !== nil)) {
        
      __fs__.realpath(pathname, cache, function(error, realpath){
        if (error) self.$raise(self.$error().$message())
        else block.$call(realpath)
      })
      ;
        } else {
        return __fs__.realpathSync(pathname, cache);
      };
    });

    Opal.defs(self, '$basename', function(path, ext) {
      var self = this;

      return __path__.basename(path, ext);
    });

    Opal.defs(self, '$dirname', function(path) {
      var self = this;

      return __path__.dirname(path);
    });

    Opal.defs(self, '$join', function() {
      var self = this;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var paths = new Array(array_size);
      for(var arg_index = 0; arg_index < array_size; arg_index++) {
        paths[arg_index] = arguments[arg_index + 0];
      }
      return __path__.join.apply(__path__, paths);
    });

    Opal.defs(self, '$directory?', function(path) {
      var $a, self = this;

      if ((($a = self['$exist?'](path)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      return !!__fs__.lstatSync(path).isDirectory();
    });

    Opal.defs(self, '$file?', function(path) {
      var $a, self = this;

      if ((($a = self['$exist?'](path)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      return !!__fs__.lstatSync(path).isFile();
    });

    Opal.defs(self, '$size', function(path) {
      var $a, self = this;

      if ((($a = self['$exist?'](path)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      return __fs__.lstatSync(path).size;
    });

    Opal.defs(self, '$open', TMP_2 = function(path, flags) {
      var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, file = nil;

      TMP_2.$$p = null;
      file = self.$new(path, flags);
      if (($yield !== nil)) {
        try {
        return $a = Opal.yield1($yield, file), $a === $breaker ? $a : $a
        } finally {
        file.$close()
        }
        } else {
        return file
      };
    });

    Opal.defn(self, '$initialize', function(path, flags) {
      var self = this;

      flags = flags.$gsub(/b/, "");
      self.path = path;
      self.flags = flags;
      return self.fd = __fs__.openSync(path, flags);
    });

    self.$attr_reader("path");

    Opal.defn(self, '$write', function(string) {
      var self = this;

      return __fs__.writeSync(self.fd, string);
    });

    Opal.defn(self, '$flush', function() {
      var self = this;

      return __fs__.fsyncSync(self.fd);
    });

    return (Opal.defn(self, '$close', function() {
      var self = this;

      return __fs__.closeSync(self.fd);
    }), nil) && 'close';
  })($scope.base, $scope.get('IO'))
};
/* Generated by Opal 0.9.0.beta2 */
Opal.modules["nodejs/dir"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$node_require']);
  return (function($base, $super) {
    function $Dir(){};
    var self = $Dir = $klass($base, $super, 'Dir', $Dir);

    var def = self.$$proto, $scope = self.$$scope;
    if (self.__glob__ == null) self.__glob__ = nil;

    self.__glob__ = self.$node_require("glob");

    var __glob__ = self.__glob__;

    Opal.defs(self, '$[]', function(glob) {
      var self = this;

      return __glob__.sync(glob);
    });

    Opal.defn(self, '$pwd', function() {
      var self = this;

      return process.cwd();
    });

    return Opal.alias(self, 'getwd', 'pwd');
  })($scope.base, null)
};
/* Generated by Opal 0.9.0.beta2 */
Opal.modules["nodejs/io"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var $a, $b, $c, $d, TMP_1, $e, TMP_2, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars;
  if ($gvars.stdout == null) $gvars.stdout = nil;
  if ($gvars.stderr == null) $gvars.stderr = nil;

  Opal.add_stubs(['$write_proc=', '$lambda']);
  (($a = [($c = ($d = self).$lambda, $c.$$p = (TMP_1 = function(string){var self = TMP_1.$$s || this;
if (string == null) string = nil;
  return process.stdout.write(string);}, TMP_1.$$s = self, TMP_1), $c).call($d)]), $b = $gvars.stdout, $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  return (($a = [($c = ($e = self).$lambda, $c.$$p = (TMP_2 = function(string){var self = TMP_2.$$s || this;
if (string == null) string = nil;
  return process.stderr.write(string);}, TMP_2.$$s = self, TMP_2), $c).call($e)]), $b = $gvars.stderr, $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
};
/* Generated by Opal 0.9.0.beta2 */
Opal.modules["nodejs"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  (function($base) {
    var self = $module($base, 'NodeJS');

    var def = self.$$proto, $scope = self.$$scope;

    nil
  })($scope.base);
  self.$require("nodejs/kernel");
  self.$require("nodejs/file");
  self.$require("nodejs/dir");
  return self.$require("nodejs/io");
};
