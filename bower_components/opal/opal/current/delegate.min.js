Opal.modules["delegate"]=function(Opal){Opal.dynamic_require_severity="warning";var OPAL_CONFIG={method_missing:true,arity_check:false,freezing:true,tainting:true};var self=Opal.top,$scope=Opal,nil=Opal.nil,$breaker=Opal.breaker,$slice=Opal.slice,$klass=Opal.klass;Opal.add_stubs(["$__setobj__","$__getobj__","$respond_to?","$__send__","$to_proc"]);(function($base,$super){function $Delegator(){}var self=$Delegator=$klass($base,$super,"Delegator",$Delegator);var def=self.$$proto,$scope=self.$$scope,TMP_1;Opal.defn(self,"$initialize",function(obj){var self=this;return self.$__setobj__(obj)});return(Opal.defn(self,"$method_missing",TMP_1=function(m){var $a,$b,self=this,$iter=TMP_1.$$p,block=$iter||nil,target=nil;var array_size=arguments.length-1;if(array_size<0)array_size=0;var args=new Array(array_size);for(var arg_index=0;arg_index<array_size;arg_index++){args[arg_index]=arguments[arg_index+1]}TMP_1.$$p=null;target=self.$__getobj__();if(($a=target["$respond_to?"](m))!==nil&&(!$a.$$is_boolean||$a==true)){return($a=($b=target).$__send__,$a.$$p=block.$to_proc(),$a).apply($b,[m].concat(Opal.to_a(args)))}else{return Opal.find_super_dispatcher(self,"method_missing",TMP_1,null).apply(self,[m].concat(Opal.to_a(args)).concat(block.$to_proc()))}}),nil)&&"method_missing"})($scope.base,$scope.get("BasicObject"));(function($base,$super){function $SimpleDelegator(){}var self=$SimpleDelegator=$klass($base,$super,"SimpleDelegator",$SimpleDelegator);var def=self.$$proto,$scope=self.$$scope;def.delegate_sd_obj=nil;Opal.defn(self,"$__getobj__",function(){var self=this;return self.delegate_sd_obj});return(Opal.defn(self,"$__setobj__",function(obj){var self=this;return self.delegate_sd_obj=obj}),nil)&&"__setobj__"})($scope.base,$scope.get("Delegator"));return(Opal.defn(Opal.Object,"$DelegateClass",function(superklass){var self=this;return $scope.get("SimpleDelegator")}),nil)&&"DelegateClass"};
