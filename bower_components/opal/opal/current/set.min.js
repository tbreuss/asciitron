Opal.modules["set"]=function(Opal){Opal.dynamic_require_severity="warning";var OPAL_CONFIG={method_missing:true,arity_check:false,freezing:true,tainting:true};function $rb_lt(lhs,rhs){return typeof lhs==="number"&&typeof rhs==="number"?lhs<rhs:lhs["$<"](rhs)}function $rb_le(lhs,rhs){return typeof lhs==="number"&&typeof rhs==="number"?lhs<=rhs:lhs["$<="](rhs)}var self=Opal.top,$scope=Opal,nil=Opal.nil,$breaker=Opal.breaker,$slice=Opal.slice,$klass=Opal.klass,$module=Opal.module;Opal.add_stubs(["$include","$new","$nil?","$===","$raise","$each","$add","$call","$merge","$class","$respond_to?","$subtract","$dup","$join","$to_a","$equal?","$instance_of?","$==","$instance_variable_get","$is_a?","$size","$all?","$include?","$[]=","$enum_for","$[]","$<<","$replace","$delete","$select","$each_key","$to_proc","$empty?","$eql?","$instance_eval","$clear","$<","$<=","$keys"]);(function($base,$super){function $Set(){}var self=$Set=$klass($base,$super,"Set",$Set);var def=self.$$proto,$scope=self.$$scope,TMP_1,TMP_4,TMP_7,TMP_9,TMP_12;def.hash=nil;self.$include($scope.get("Enumerable"));Opal.defs(self,"$[]",function(){var self=this;var array_size=arguments.length-0;if(array_size<0)array_size=0;var ary=new Array(array_size);for(var arg_index=0;arg_index<array_size;arg_index++){ary[arg_index]=arguments[arg_index+0]}return self.$new(ary)});Opal.defn(self,"$initialize",TMP_1=function(enum$){var $a,$b,TMP_2,self=this,$iter=TMP_1.$$p,block=$iter||nil;if(enum$==null){enum$=nil}TMP_1.$$p=null;self.hash=$scope.get("Hash").$new();if(($a=enum$["$nil?"]())!==nil&&(!$a.$$is_boolean||$a==true)){return nil}if(($a=$scope.get("Enumerable")["$==="](enum$))!==nil&&(!$a.$$is_boolean||$a==true)){}else{self.$raise($scope.get("ArgumentError"),"value must be enumerable")}if(block!==false&&block!==nil){return($a=($b=enum$).$each,$a.$$p=(TMP_2=function(item){var self=TMP_2.$$s||this;if(item==null)item=nil;return self.$add(block.$call(item))},TMP_2.$$s=self,TMP_2),$a).call($b)}else{return self.$merge(enum$)}});Opal.defn(self,"$dup",function(){var self=this,result=nil;result=self.$class().$new();return result.$merge(self)});Opal.defn(self,"$-",function(enum$){var $a,self=this;if(($a=enum$["$respond_to?"]("each"))!==nil&&(!$a.$$is_boolean||$a==true)){}else{self.$raise($scope.get("ArgumentError"),"value must be enumerable")}return self.$dup().$subtract(enum$)});Opal.alias(self,"difference","-");Opal.defn(self,"$inspect",function(){var self=this;return"#<Set: {"+self.$to_a().$join(",")+"}>"});Opal.defn(self,"$==",function(other){var $a,$b,TMP_3,self=this;if(($a=self["$equal?"](other))!==nil&&(!$a.$$is_boolean||$a==true)){return true}else if(($a=other["$instance_of?"](self.$class()))!==nil&&(!$a.$$is_boolean||$a==true)){return self.hash["$=="](other.$instance_variable_get("@hash"))}else if(($a=($b=other["$is_a?"]($scope.get("Set")),$b!==false&&$b!==nil?self.$size()["$=="](other.$size()):$b))!==nil&&(!$a.$$is_boolean||$a==true)){return($a=($b=other)["$all?"],$a.$$p=(TMP_3=function(o){var self=TMP_3.$$s||this;if(self.hash==null)self.hash=nil;if(o==null)o=nil;return self.hash["$include?"](o)},TMP_3.$$s=self,TMP_3),$a).call($b)}else{return false}});Opal.defn(self,"$add",function(o){var self=this;self.hash["$[]="](o,true);return self});Opal.alias(self,"<<","add");Opal.defn(self,"$classify",TMP_4=function(){var $a,$b,TMP_5,$c,TMP_6,self=this,$iter=TMP_4.$$p,block=$iter||nil,result=nil;TMP_4.$$p=null;if(block!==nil){}else{return self.$enum_for("classify")}result=($a=($b=$scope.get("Hash")).$new,$a.$$p=(TMP_5=function(h,k){var self=TMP_5.$$s||this;if(h==null)h=nil;if(k==null)k=nil;return h["$[]="](k,self.$class().$new())},TMP_5.$$s=self,TMP_5),$a).call($b);($a=($c=self).$each,$a.$$p=(TMP_6=function(item){var self=TMP_6.$$s||this,$a;if(item==null)item=nil;return result["$[]"](($a=Opal.yield1(block,item))===$breaker?$breaker.$v:$a).$add(item)},TMP_6.$$s=self,TMP_6),$a).call($c);return result});Opal.defn(self,"$collect!",TMP_7=function(){var $a,$b,TMP_8,self=this,$iter=TMP_7.$$p,block=$iter||nil,result=nil;TMP_7.$$p=null;if(block!==nil){}else{return self.$enum_for("collect!")}result=self.$class().$new();($a=($b=self).$each,$a.$$p=(TMP_8=function(item){var self=TMP_8.$$s||this,$a;if(item==null)item=nil;return result["$<<"](($a=Opal.yield1(block,item))===$breaker?$breaker.$v:$a)},TMP_8.$$s=self,TMP_8),$a).call($b);return self.$replace(result)});Opal.alias(self,"map!","collect!");Opal.defn(self,"$delete",function(o){var self=this;self.hash.$delete(o);return self});Opal.defn(self,"$delete?",function(o){var $a,self=this;if(($a=self["$include?"](o))!==nil&&(!$a.$$is_boolean||$a==true)){self.$delete(o);return self}else{return nil}});Opal.defn(self,"$delete_if",TMP_9=function(){try{var $a,$b,TMP_10,$c,$d,TMP_11,self=this,$iter=TMP_9.$$p,$yield=$iter||nil;TMP_9.$$p=null;($a=$yield!==nil)!==false&&$a!==nil?$a:Opal.ret(self.$enum_for("delete_if"));($a=($b=($c=($d=self).$select,$c.$$p=(TMP_11=function(o){var self=TMP_11.$$s||this,$a;if(o==null)o=nil;return $a=Opal.yield1($yield,o),$a===$breaker?$a:$a},TMP_11.$$s=self,TMP_11),$c).call($d)).$each,$a.$$p=(TMP_10=function(o){var self=TMP_10.$$s||this;if(self.hash==null)self.hash=nil;if(o==null)o=nil;return self.hash.$delete(o)},TMP_10.$$s=self,TMP_10),$a).call($b);return self}catch($returner){if($returner===Opal.returner){return $returner.$v}throw $returner}});Opal.defn(self,"$add?",function(o){var $a,self=this;if(($a=self["$include?"](o))!==nil&&(!$a.$$is_boolean||$a==true)){return nil}else{return self.$add(o)}});Opal.defn(self,"$each",TMP_12=function(){var $a,$b,self=this,$iter=TMP_12.$$p,block=$iter||nil;TMP_12.$$p=null;if(block!==nil){}else{return self.$enum_for("each")}($a=($b=self.hash).$each_key,$a.$$p=block.$to_proc(),$a).call($b);return self});Opal.defn(self,"$empty?",function(){var self=this;return self.hash["$empty?"]()});Opal.defn(self,"$eql?",function(other){var $a,$b,TMP_13,self=this;return self.hash["$eql?"](($a=($b=other).$instance_eval,$a.$$p=(TMP_13=function(){var self=TMP_13.$$s||this;if(self.hash==null)self.hash=nil;return self.hash},TMP_13.$$s=self,TMP_13),$a).call($b))});Opal.defn(self,"$clear",function(){var self=this;self.hash.$clear();return self});Opal.defn(self,"$include?",function(o){var self=this;return self.hash["$include?"](o)});Opal.alias(self,"member?","include?");Opal.defn(self,"$merge",function(enum$){var $a,$b,TMP_14,self=this;($a=($b=enum$).$each,$a.$$p=(TMP_14=function(item){var self=TMP_14.$$s||this;if(item==null)item=nil;return self.$add(item)},TMP_14.$$s=self,TMP_14),$a).call($b);return self});Opal.defn(self,"$replace",function(enum$){var self=this;self.$clear();self.$merge(enum$);return self});Opal.defn(self,"$size",function(){var self=this;return self.hash.$size()});Opal.alias(self,"length","size");Opal.defn(self,"$subtract",function(enum$){var $a,$b,TMP_15,self=this;($a=($b=enum$).$each,$a.$$p=(TMP_15=function(item){var self=TMP_15.$$s||this;if(item==null)item=nil;return self.$delete(item)},TMP_15.$$s=self,TMP_15),$a).call($b);return self});Opal.defn(self,"$|",function(enum$){var $a,self=this;if(($a=enum$["$respond_to?"]("each"))!==nil&&(!$a.$$is_boolean||$a==true)){}else{self.$raise($scope.get("ArgumentError"),"value must be enumerable")}return self.$dup().$merge(enum$)});Opal.defn(self,"$superset?",function(set){var $a,$b,TMP_16,self=this;($a=set["$is_a?"]($scope.get("Set")))!==false&&$a!==nil?$a:self.$raise($scope.get("ArgumentError"),"value must be a set");if($rb_lt(self.$size(),set.$size())){return false}return($a=($b=set)["$all?"],$a.$$p=(TMP_16=function(o){var self=TMP_16.$$s||this;if(o==null)o=nil;return self["$include?"](o)},TMP_16.$$s=self,TMP_16),$a).call($b)});Opal.alias(self,">=","superset?");Opal.defn(self,"$proper_superset?",function(set){var $a,$b,TMP_17,self=this;($a=set["$is_a?"]($scope.get("Set")))!==false&&$a!==nil?$a:self.$raise($scope.get("ArgumentError"),"value must be a set");if($rb_le(self.$size(),set.$size())){return false}return($a=($b=set)["$all?"],$a.$$p=(TMP_17=function(o){var self=TMP_17.$$s||this;if(o==null)o=nil;return self["$include?"](o)},TMP_17.$$s=self,TMP_17),$a).call($b)});Opal.alias(self,">","proper_superset?");Opal.defn(self,"$subset?",function(set){var $a,$b,TMP_18,self=this;($a=set["$is_a?"]($scope.get("Set")))!==false&&$a!==nil?$a:self.$raise($scope.get("ArgumentError"),"value must be a set");if($rb_lt(set.$size(),self.$size())){return false}return($a=($b=self)["$all?"],$a.$$p=(TMP_18=function(o){var self=TMP_18.$$s||this;if(o==null)o=nil;return set["$include?"](o)},TMP_18.$$s=self,TMP_18),$a).call($b)});Opal.alias(self,"<=","subset?");Opal.defn(self,"$proper_subset?",function(set){var $a,$b,TMP_19,self=this;($a=set["$is_a?"]($scope.get("Set")))!==false&&$a!==nil?$a:self.$raise($scope.get("ArgumentError"),"value must be a set");if($rb_le(set.$size(),self.$size())){return false}return($a=($b=self)["$all?"],$a.$$p=(TMP_19=function(o){var self=TMP_19.$$s||this;if(o==null)o=nil;return set["$include?"](o)},TMP_19.$$s=self,TMP_19),$a).call($b)});Opal.alias(self,"<","proper_subset?");Opal.alias(self,"+","|");Opal.alias(self,"union","|");return(Opal.defn(self,"$to_a",function(){var self=this;return self.hash.$keys()}),nil)&&"to_a"})($scope.base,null);return function($base){var self=$module($base,"Enumerable");var def=self.$$proto,$scope=self.$$scope,TMP_20;Opal.defn(self,"$to_set",TMP_20=function(klass){var $a,$b,self=this,$iter=TMP_20.$$p,block=$iter||nil;var array_size=arguments.length-1;if(array_size<0)array_size=0;var args=new Array(array_size);for(var arg_index=0;arg_index<array_size;arg_index++){args[arg_index]=arguments[arg_index+1]}if(klass==null){klass=$scope.get("Set")}TMP_20.$$p=null;return($a=($b=klass).$new,$a.$$p=block.$to_proc(),$a).apply($b,[self].concat(Opal.to_a(args)))})}($scope.base)};
